{"/Triode-Car/zh/introduction/hardware.html":{"title":"硬件介绍","content":"# 硬件介绍 ## 硬件参数 * 供电电压：3.6V~3.7V DC(3.6V~3.7V锂电池) * 光敏电阻巡线(模拟值)×2 (P1 P2) * SR04、SR04P超声波接口(5V)×1 (Trig:P12 Echo:P14) * I2C接口(3.3V）×1 * IO扩展口 ×2 (P5 P0 P3 P4 P6 P7 P8 P9 P10 P16 P11) * 减速电机×2 (P14 P15) * 电机空载转速（3V）：90rpm * 电机驱动方式：PWM电机驱动 * 扩展M3螺丝孔×6（支持乐高接口） ## 硬件接口示意 ![](../assets/Triode Car IO.png) 在Triode Car的上面，有很多特殊设计： 1. 在Triode Car正前方，有两个螺丝孔，可以用来固定避障传感器或者巡线传感器等传感器。 2. 在可调电阻旁，有两对特殊的电阻，R11和R13，R12和R14，如果选择焊接R11和R12，LED会自动显示电机的状态，是正转还是停止，如果选择焊接R13和R14，LED会变成可编程的LED灯，P11控制左边的LED（D3），P5控制右边的灯（D4）。 3. Triode Car上有为了手动焊接特殊设计的焊盘（Controller Socket标记位置），通过这样的设计，手动焊接Bit底座时更方便，并且使用时如果想快速确认Pin的位置，不用需要反复确认原理图与引脚号。 4. 在Bit底座后面，有一个切换按钮，可以切换两种控制方式：IC切换和Bit切换。 5. 在Triode Car中间偏下部分，有一个30*15mm的方形孔，作用是给测速传感器留下空间。添加完测速传感器之后，可能电池盒的位置被占用，此时我们推荐您使用铜柱，塑料板等，将电池盒垫高。[推荐测速传感器](https://www.adafruit.com/product/3986) 6. 在Triode Car正下方，有一些可以随意焊接的洞洞，洞洞的最左侧一条连接的是电源的正极，最右侧一条则连接的是负极，最上面一排则放置了一些IO供使用，可以在这个区域添加一些传感器或者蜂鸣器等，让您的小车更加全能。当然，添加之后可能会出现供电不足的情况，建议使用电流更强大的锂电池。 ## 功能引脚定义 Function web:bit GPIO : : : : Wheel(Left) P14 Wheel(Right) P15 ultrasonic (Trig) P12 ultrasonic (Echo) P13 Line Detecting(Left) P2 Line Detecting(Right) P1 Speed Detection(Left) P11 Speed Detection(Right) P5 ## 原理图 ![](../assets/Triode Car Sch.png) [原理图下载](https://github.com/BPI STEAM/Triode Car/blob/main/HardWare/Sch/BPi BIT Triode Car V1.0.3.pdf) ## 产品标配清单 1. 小车PCB ×1 2. 电阻若干 3. Bit底座 ×1 4. LM393 ×1 5. 电机 ×2 6. 前轮 ×1 7. 指示灯 ×4 8. 可调电阻 ×2 9. 电容 ×2 10. 三极管 ×2 11. 开关 ×2 12. 地图/说明书 ×1 13. 螺丝若干"},"/Triode-Car/zh/microbit_tutorial/LDR_calibration.html":{"title":"校准巡线检测电路","content":"# 校准巡线检测电路 ## 设计思路 为了能以较高的灵敏度应用巡线检测电路，我们需要手动对两个光敏电阻对应连接的可调电阻进行微调，使其工作在灵敏度较高的区间内，且应该尽量使相同光照强度下输出的电压模拟量保持相等。 我们可以直接应用[采集巡线检测电路的电压模拟信号](read_LDR.html)教程中所示的例程来在电脑上输出采集到的电压模拟量数值，然后使用螺丝刀对可调电阻进行调节。 在micro:bit所能测量的0 1023级电压模拟量范围内，越靠近中间值，光敏电阻对光照强弱变化的响应灵敏度就越高。 所以对巡线检测电路校准时，应在稳定的环境光下，尽量将两个可调电阻调节到靠近中间值512，并尽量使二者在相同光照强度下输出的电压模拟量的差值减小。 以上实行校准步骤都是建立在保持micro:bit与PC连接，micro:bit与Triode Car连接的前提下的，但实际应用中，为了提高使用时的灵敏度，最好直接在实际应用的场景下进行校准。 我们不一定总有条件在实际应用的场景下还能保持micro:bit与PC连接。在不能连接PC的时候，就需要提前写好一个可以正确的指引我们校准巡线检测电路的程序。 分析校准的步骤： 1. 选择先对左侧的可调电阻进行手动调整，使其并联的光敏电阻在micro:bit对应引脚上输出的电压模拟量接近中间值。 2. 在上一个条件满足的前提下调整右侧的可调电阻，使其并联的光敏电阻在micro:bit对应引脚上输出的电压模拟量接近另一个光敏电阻。 在程序上这显然是可以通过\"if\"条件判断来完成的，而对于实际进行手动校准的人，则是需要得到对应条件下使micro:bit显示不同图形使人也能得到条件满足的反馈。 ## 例程 <div align center> <img src \"../assets/Triode car_LDR_calibration_1.png\" width \"600\"/> </div> [在Github上的例程项目文件](https://github.com/Wind stormger/Makecode/blob/master/microbit Triode car_LDR_calibration_2.hex) > 项目文件下载到本地后可导入MakeCode中查看和再编辑，也可直接通过USB烧录到Micro:Bit中运行。 ## 设计说明 1. 将程序整体放入一个\"function\"自定义函数中，这有利于我们从认知上在大量积木中区分某一部分的功能，方便后续调用或维护。 2. 整体由两个\"while\"循环积木组成，加入了循环条件，这样可以在可调电阻校准完成后改变循环条件退出循环。 3. 在进入\"while\"循环之前，使Micro:Bit显示对应的方向指示，给人以直观的行动目标，确认当前应该要进行手动调整的可调电阻。 4. 第一个\"while\"循环积木中的程序用于校准左侧光敏电阻，其中\"if\"判断条件为，左侧光敏电阻输出的电压模拟量大于等于450小于等于550。 5. 当满足第4条中的\"if\"判断条件后，使Micro:Bit显示一个表示正确的图形，给人以视觉上反馈，此时人应该停止对左侧的可调电阻的调节，随后延时1000ms再一次进行相同的\"if\"判断条件，用以消除手动调整可能产生的抖动而带来的误差，当再次确认条件满足时，改变控制这个\"while\"循环的循环条件以退出循环，执行下一步。 6. 第二个\"while\"循环积木中的程序用于校准右侧光敏电阻，其中\"if\"判断条件为，左右两侧光敏电阻输出的电压模拟量相减，其差值的绝对值小于等于25。"},"/Triode-Car/zh/microbit_tutorial/control_motor.html":{"title":"用microbit按钮控制电机","content":"# 用microbit按钮控制电机 ## 例程 <div align center> <img src \"../assets/Triode Car_motor_control_1.png\" width \"300\"/> </div> [在Github上的例程项目文件](https://github.com/Wind stormger/Makecode/blob/master/microbit Triode car_motor_control_1.hex) > 项目文件下载到本地后可导入MakeCode中查看和再编辑，也可直接通过USB烧录到Micro:Bit中运行。 ## 设计说明 1. 启动或复位时停车。 2. 同时按下AB按钮直行。 3. 按下A按钮右转。 4. 按下B按钮左转。 在[硬件浅析与调试：驱动电路](../hardware/analysis&calibrate.html#驱动电路)中后半部分有提到，驱动电路中有设计一个切换开关，可以将驱动电路由LM393电压比较器控制切换到由micro:bit控制。而micro:bit控制驱动电路的方法，和LM393电压比较器相同，低电平启动，高电平停止。"},"/Triode-Car/zh/microbit_tutorial/new_project.html":{"title":"创建MakeCode项目","content":"# 创建MakeCode项目 1.打开网页链接： [micro:bit MakeCode 网页链接](https://makecode.microbit.org/#) 2.可以选择点击网页右上角的齿轮图标，再点击Language即可切换简体中文。但此处还是建议尽量直接使用**英文**，MakeCode 中绝大部分积木名称都与由英文字符组成的程序代码中的各种基础语法单词相对应,这将有利于未来过渡到使用代码编程。 <div align center> <img src \"../assets/makecode language.png\" width \"150\"/> </div> 3.点击 New Projects 新建项目，随后给项目取个名字即可即可进入编辑器中。 <div align center> <img src \"../assets/makecode new.png\" width \"150\"/> </div> 4.除了将项目保存为一个 `.hex` 文件，还可以作为一个Github项目保存，这需要准备一个[Github](https://github.com/)账户，并与MakeCode关联登录。 <div align center> <img src \"../assets/makecode save.png\" width \"300\"/> </div> 5.后续所有例程提供的链接都是 `.hex` 文件的链接，下载它们不需要登录Github账户。在链接所打开的网页中，鼠标右键点击 `Download` 按钮，再点击 `将链接另存为` 即可将`.hex`文件下载至计算机本地硬盘中。 <div align center> <img src \"../assets/makecode save_2.png\" width \"600\"/> </div>"},"/Triode-Car/zh/microbit_tutorial/import_extension.html":{"title":"导入扩展积木","content":"# 导入扩展积木 1.在MakeCode编辑器中，点击网页右上角的齿轮图标，点击 Extensions 扩展。 <div align center> <img src \"../assets/makecode extensions_1.png\" width \"200\"/> </div> 2.进入一个检索各式各样的扩展积木的页面。 <div align center> <img src \"../assets/makecode extensions_2.png\" width \"500\"/> </div> 3.在上方搜索栏中输入`triodecar` 即可看到专用于 Triode Car 的扩展积木。 <div align center> <img src \"../assets/makecode extensions_3.png\" width \"500\"/> </div> 4.点击即可添加进项目中，在MakeCode编辑器的积木列表里即可看到几块扩展积木。 <div align center> <img src \"../assets/makecode extensions_4.png\" width \"500\"/> </div>"},"/Triode-Car/zh/microbit_tutorial/radio_control.html":{"title":"无线电通讯控制电机","content":"# 无线电通讯控制电机 ## 例程 <div align center> <img src \"../assets/Triode Car_radio_control_1.png\" width \"400\"/> </div> [在Github上的例程项目文件](https://github.com/Wind stormger/Makecode/blob/master/microbit Triode Car_radio_control_1.hex) > 项目文件下载到本地后可导入MakeCode中查看和再编辑，也可直接通过USB烧录到Micro:Bit中运行。 ## 设计说明 micro:bit支持无线电通讯，在MakeCode中应用无线电扩展积木进行编程，并将程序下载进两块micro:bit后，即可在二者之间建立无线通讯，并可相互控制对方的硬件。 将例程下载进两块micro:bit，一块插在Triode Car上，一块拿在手上，两块都接通电源，即可通过手上的micro:bit的按钮AB控制Triode Car的电机启停。 按A左转，按B右转，同时按下AB直行，松开即停车。 其中加入的四个变量并非多余的存在，虽然也可以在积木中填上我们所需要的数值，但使用变量名来代替这些指定的数值有利于我们在认知上建立更清晰的逻辑，在越复杂的程序中越能体现其价值。"},"/Triode-Car/zh/microbit_tutorial/Line_Follower.html":{"title":"巡线行驶","content":"# 巡线行驶 ## 设计思路 在[校准巡线检测电路](LDR_calibration.html)之后，我们即可开始对巡线检测电路进行有效利用。 根据[硬件的浅析与调试](../hardware/analysis&calibrate.html)中所介绍的原理，巡线需要利用线路与其两侧路面对光线不同的反射率进行实时的光照强度检测，在程序中读取左右两个光敏电阻的电压模拟值，对数值进行比对，以此判断Triode Car行进路线是否发生偏移以及偏移方向，进而对左右两个电机的启停进行控制，修正Triode Car的行驶方向，达成沿着线路行驶的目的。 ## 例程 <div align center> <img src \"../assets/Triode car_Line_Follower.png\" width \"600\"/> </div> [在Github上的例程项目文件](https://github.com/Wind stormger/Makecode/blob/master/microbit Triode car_Line_Follower.hex) > 项目文件下载到本地后可导入MakeCode中查看和再编辑，也可直接通过USB烧录到Micro:Bit中运行。 ## 设计说明 1. \"on button A pressed\"积木用于控制循迹程序的启动和停止，每按一次按钮A，其中设置的变量就会改变一次状态。 2. \"forever\"积木将重复执行其内部的程序，每次循环结束或在循环中执行到\"show\"或1. \"pause\"积木时会让出线程允许其他的\"forever\"积木或事件处理程序运行，所以此处三个\"forever\"积木与一个\"on button A pressed\"积木可以共同在后台运行，这样使系统具备同时执行多个程序的能力，一般将此称作“多工”。 3. 第一个\"forever\"积木内的程序用于循环读取左右两个光敏电阻电压模拟值，然后在多级\"if\"条件积木中进行判断，满足相应条件时改变变量，该变量用于控制电机。 4. 第二个\"forever\"积木内的多级\"if\"条件积木对第一个\"forever\"积木内改变的变量值进行判断，直接输出控制信号来控制左右电机的启停和转速。 5. 第一，二个\"forever\"积木内的循环条件即为\"on button A pressed\"积木控制的变量，变量为\"true\"值时才会循环执行。 6. 第三个\"forever\"积木略有巧思，其内部的循环仅在用于控制电机的变量发生变化时才会执行一次，对应改变LED当前应当显示的内容。"},"/Triode-Car/zh/microbit_tutorial/bluetooth_control.html":{"title":"蓝牙控制","content":"# 蓝牙控制 ## 介绍 micro:bit支持蓝牙通讯，在MakeCode中应用蓝牙扩展积木进行编程，在支持蓝牙通讯的Apple或Android设备上安装APP即可通过蓝牙无线控制。 * 适用iPhone或iPad：[官方APP micro:bit App Store链接](https://apps.apple.com/cn/app/micro bit/id1092687276) * 适用Android手机或平板：[第三方APP microbit blue Github链接](https://github.com/microbit foundation/microbit blue/raw/master/releases/ble_demo_v1_5_4.apk)或：[第三方APP Kitronik Move Google Play链接](https://play.google.com/store/apps/details?id com.kitronik.blemove) > App Store中的官方APP micro:bit有蓝牙控制功能。Google Play商店有官方APP micro:bit，但没有蓝牙控制功能，所以需要第三方APP来实现蓝牙控制功能。 ## 蓝牙配对流程及注意事项 * 在MakeCode中，点击Extension，在页面中选择Bluetooth，移除Radio功能，即可将micro:bit的无线通讯功能切换为Bluetooth。 <div align center> <img src \"../assets/Makecode_bluetooth_extension.jpg\" width \"200\"/> </div> * 当micro:bit蓝牙配对的是Android设备且使用的APP为第三方APP时，应当在MakeCode中\"Project Setting\"项目设置中勾选\"Passkey pairing: Pairing requires 6 digit key to pair.\"。 * micro:bit通电开机后，同时按下按钮AB并保持按下的状态，再点按一次Reset复位键，保持读条进度完成，即可进入蓝牙配对模式。 * Android设备应打开GPS和蓝牙功能(需要开启GPS功能才可保持连接稳定)。 * 进入Android系统的蓝牙设置内找到micro:bit并与之配对，开始配对时micro:bit会提示按一次按钮A，按下一次后将连续显示6位配对码，将其输入Android设备上显示的蓝牙配对码输入框中，稍等片刻即可配对成功。 * 建议配对成功后再按一次Reset复位键将micro:bit复位。 * Apple设备如iPhone或iPad则无需进入系统的蓝牙设置，使micro:bit进入蓝牙配对模式后遵照官方APP micro:bit内的操作提示一步步操作即可完成配对。 ## 例程 <div align center> <img src \"../assets/TriodeCar_bluetooth_control_1.png\" width \"500\"/> </div> [在Github上的例程项目文件](https://github.com/Wind stormger/Makecode/blob/master/microbit Triode car_bluetooth_control_1.hex) > 项目文件下载到本地后可导入MakeCode中查看和再编辑，也可直接通过USB烧录到Micro:Bit中运行。 ## 设计说明 蓝牙连接时显示一个红心图案，蓝牙断开时显示一个错误图案，使用Apple或Android设备上安装的APP的蓝牙控制功能即可无线控制Triode Car，蓝牙控制端按钮A按下小车前进，按钮C按下小车左转，按钮D按下小车右转，松开即停车。 其中on event from()with value()积木在Control选项栏中。"},"/Triode-Car/zh/microbit_tutorial/read_LDR.html":{"title":"采集巡线检测电路的电压模拟信号","content":"# 采集巡线检测电路的电压模拟信号 ## 例程 <div align center> <img src \"../assets/Triode car_read_LDR.png\" width \"600\"/> </div> [在Github上的例程项目文件](https://github.com/Wind stormger/Makecode/blob/master/microbit Triode car_read_LDR.hex) > 项目文件下载到本地后可导入MakeCode中查看和再编辑，也可直接通过USB烧录到Micro:Bit中运行。 ## 设计说明 1. 每间隔100ms通过USB串口将读取到的左右两个传感器的电压模拟值发送给电脑。 2. 可以在在MakeCode中打开控制台查看实时接收到的信息。 硬件原理参考[硬件的浅析与调试](../hardware/analysis&calibrate.html)中的介绍。 Triode Car专用扩展积木中有可采集巡线检测电路的电压模拟信号的\"read left/right line tracking sensor\"积木。 micro:bit引脚对0至3.3V电压测量精度为10bit即2^10 1024级，所以调用\"read left/right line tracking sensor\"积木从对应引脚读到的电压模拟值将为0至1023。"},"/Triode-Car/zh/microbit_tutorial/first_meeting.html":{"title":"初识 micro:bit","content":"# 初识 micro:bit [micro:bit](https://microbit.org/) 是一款由英国广播电视公司为青少年编程教育设计，并由微软，三星，ARM，英国兰卡斯特大学等合作伙伴共同完成开发的微型电脑，目前推出V1，V2两款，后者较比前者性能稍强。 ![](../assets/microbit.png) ## MakeCode编辑器 MakeCode 是微软所推行的应用于编程教育的图形编程语言，也是 micro:bit 目前主流应用的编程语言，无需下载安装任何本地应用，在浏览器中打开网页即可在线编程。 [micro:bit MakeCode 网页链接](https://makecode.microbit.org/#) 在MakeCode编辑器中可以在零编程基础的情况下通过搭建图形积木的方式入门，更有将实现比较复杂的程序封装起来的扩展积木可以使用，进一步降低门槛，对多国语言的本地化支持也是其重要的优势。 其编辑器主要由三个部分组成，图形化积木（blocks）编辑器，仿真模拟器，图形化积木所对应的JavaScript代码编辑器。 ![](../assets/microbit MakeCode.png) ## MicroPython编辑器 MicroPython是相对进阶但也并不难上手学习的编程语言，micro:bit 更有提供较为易用的模块来降低对其编程难度，其相对图形编程最大的不同就是转变为抽象的字符代码。 [micro:bit micropython 网页链接](https://python.microbit.org/v/2) 如其名所述，它是 Python 3 编程语言的一个精简高效的实现，它包含了 Python 标准库的一小部分子集，并且经过优化，可以在微控制器上和受限环境中运行。 如果曾经学过python，那将会相当容易上手，反之在开发板上学习了MicroPython后，也能几乎无障碍地切换到python做进一步的学习或开发应用。 ![](../assets/microbit micropython.png)"},"/Triode-Car/zh/microbit_tutorial/control_motor2.html":{"title":"调整电机转速","content":"# 调整电机转速 ## 例程 <div align center> <img src \"../assets/Triode Car_motor_control_2.png\" width \"500\"/> </div> [在Github上的例程项目文件](https://github.com/Wind stormger/Makecode/blob/master/microbit Triode car_motor_control_2.hex) > 项目文件下载到本地后可导入MakeCode中查看和再编辑，也可直接通过USB烧录到Micro:Bit中运行。 ## 设计说明 1. 按一次A按钮转速加1档 2. 按一次B按钮转速减1档 3. micro:bit显示当前挡位数值。 Triode Car专用扩展积木中有可单独控制左右电机转速的积木，可进行10级调速。 例程中\"forever\"积木会在\"on start\"积木执行完后开始无限循环执行其内部的积木，而在每次循环的间隙则可执行其他事件处理程序，如on button A/B pressed。 加入了一个\"if\"判断积木，若变量\"speed\"值小于0或大于10时，将变量\"speed\"值设为0，这样可以将值限定在0到10范围内不会溢出而报错。"},"/Triode-Car/zh/index.html":{"title":"Triode-Car","content":"# Triode Car BPI Steam 的 Triode Car 是一款专注于教育用途的机器人，售价低廉，目的明确，功能完备。 Triode Car 同时兼容web:bit和micro:bit两款开发板。小巧的机身，大量可扩展的接口，元件简单易用，能快速吸引小朋友的注意力，完成图形编程的快速入门，恰当利用即可用于培养独立思考能力和逻辑思维能力。 ![](assets/Triode Car_webbit&microbit.png) ## 关键特性 * 两种控制模式，可使用 LM393 比较器或者micro:bit 与 web:bit 控制 * 支持MakeCode图形化编程(与micro:bit配合)，支持Webduino图形化编程（与web:bit配合）及MicroPython编程（micro:bit 与web:bit） * 机身小巧，整体性强 * 直流减速电机 * 兼容乐高积木扩展螺孔 * 功能齐全，扩展性强，可扩展红外发射、红外接收、测速、氛围灯、蜂鸣器、舵机...... * 洞洞板扩展焊接接口，可将扩展的外设焊接与此便于连接与使用 * 有I2C接口（3.3V）、巡线、超声波接口、排针扩展口 * 简单易用，上手难度低"},"/Triode-Car/zh/hardware/analysis&calibrate.html":{"title":"TriodeCar硬件分析及校准","content":"# TriodeCar硬件分析及校准 ## 驱动电路 这是一个最基础的电路： <div align center> <img src \"../assets/Triode Car Sch1.png\" width \"30%\"/> </div> 电池，二极管，电感，手动开关四者串联，两个负载并联接入，一个负载是电机，一个负载是发光二极管，作为对发光二极管的保护又给其串联了一个用于分压的电阻。 在这样的电路中唯一能控制两个负载的只有一个手动开关。 这是PNP型三极管： ![](../assets/Triode S8550.png) * 1脚 Emitter发射极 * 2脚 Base基极 * 3脚 Collector集电极 > 一般在原理图中三极管的E、B、C指的就是此三脚。 **双极性结型晶体管**（bipolar junction transistor, BJT），俗称**三极管**，是一种具有三个终端的电子器件，由三部分掺杂程度不同的半导体制成。双极性晶体管是电子学历史上具有革命意义的一项发明，其发明者威廉·肖克利、约翰·巴丁和沃尔特·布喇顿被授予1956年的诺贝尔物理学奖。 在双极性晶体管电学符号中， Base基极 和 Emitter发射极 之间的箭头指向电流的方向，这里的电流为电子流动的反方向。PNP型晶体管的箭头从 Emitter发射极 指向 Base基极 ，而NPN型与之相反。 > 想了解其更详尽的信息，可以继续参考[维基百科：双极性晶体管](https://zh.wikipedia.org/wiki/%E5%8F%8C%E6%9E%81%E6%80%A7%E6%99%B6%E4%BD%93%E7%AE%A1)，或者检索其他相关的文献资料，需要具备相应的 数理化 前置知识才能更好的理解。 将一个PNP型三极管加入电路： ![](../assets/Triode Car Sch2.png) 设计这样的电路可以控制PNP型三极管的2脚 Base基极 电压，这个PNP型三极管即可作为一个**开关**使用。 1脚 Emitter发射极 与 3脚 Collector集电极**导通**条件为，Emitter发射极电压大于Collector集电极电压，Emitter发射极电压大于Base基极电压。而当Base基极电压大于或等于Emitter发射极电压时则**关断**。 两个负载被 Base基极 所接收到的电平信号所控制，而此电平信号则由 电压比较器 的输出端提供，通过另一个开关还可切换至由 micro:bit 或 web:bit 开发板来提供。 R7 在这里起到一个**上拉电阻**的作用，即使没有给2脚 Base基极输入控制信号，控制信号输出端悬空，既没有给高电平也没给低电平，类似于开路的状态，通过R7上拉电阻，也能使2脚 Base基极获得一个高电平，保持PNP三极管关断的状态，使得此电路仅在2脚 Base基极获得低电平信号时才可导通。 > 有关“高低电平”、“电平信号”更详尽的信息可以参考[百度百科：逻辑电平](https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E7%94%B5%E5%B9%B3)，或者检索其他相关的文献资料。 ## 巡线检测电路 在Triode Car的底部，有两个巡线检测电路，每一路包含了一个光敏电阻和一个LED。当LED的光照到黑色和白色的材料上面时，由于反射率的不同，光敏电阻的阻值会发生明显的变化。 ![](../assets/Photoresistor GL5506.png) 在Triode Car上，光敏电阻使用的器件型号是GL5506，**其电阻值会随着光照的加强而减小**，亮电阻（10Lux）是2 5KΩ，暗电阻是0.2MΩ。 亮电阻：用400 600Lux光照射2小时后，在标准光源（色温2854K）10Lux光照下的测量的电阻值。 暗电阻：关闭10Lux光照后第10秒测量的电阻值。 设计这样的电路： <div align center> <img src \"../assets/Triode Car Sch3.png\" width \"65%\"/> </div> 可以看到，由RV1可调电阻、R3电阻、R5光敏电阻组成的支路与由RV2可调电阻、R4电阻、R6光敏电阻组成的支路是并联的。 根据并联等压分流的原理，两条支路电压相等。 在R5光敏电阻所在的支路上，根据串联等流分压的原理，LDR_L 节点电压等于电流值乘以（R5+R3）阻值，当R5光敏电阻所受光照减弱，其阻值将增大， LDR_L 节点电压随之增大，反之光照增强时也同理。 LDR_R 节点电压亦同理。 根据串联等流分压的原理，若使RV1可调电阻的阻值增大，LDR_L 节点电压则会减小，反之同理。 RV2可调电阻亦同理。 这样，两个可调电阻即可用于校准 LDR_R 与 LDR_L 两个节点的电压值，尽量保证相同光照强度下两个节点电压值相等，以便后续 电压比较器 的应用。 ## 电压比较器 这是LM393电压比较器的原理图: <div align center> <img src \"../assets/LM393_sch.jpg\" width \"250\"/> </div> <div align center> <img src \"../assets/LM393 1.png\" width \"400\"/> </div> 其内部集成了两个电压比较器，当电压比较器的同相输入端(IN+)大于反相输入端(IN )电压时，输出高电平，反之则输出低电平。而其电压比较器的内部原理图则是这样： ![](../assets/LM393 2.png) 由此可见，实现 **“比较两个输入端的电压大小”** 这样相对复杂的功能，也是基于二极管、三极管等基础元件来设计并封装而成的。 > 此处不对其做更深入的原理分析，感兴趣的可以参考[维基百科：比较器](https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%99%A8)，或者检索其他相关的文献资料。 将LM393电压比较器加入电路中，并补全驱动电路和巡线检测电路(`单击图片可放大查看`)： ![](../assets/Triode Car sys.jpg) ![](../assets/Triode Car Sch4.png) 至此，我们就基本构建出一个自动控制系统，在其较为理想的工作状况下，它可以在一定范围内经由光敏电阻采集左右两侧道路明暗的信息，电压比较器在信息变化中不断的分别控制着两个轮子启停，以修正行驶方向。 ## 各元件的信号与工作状态关系表 车头相较线路偏向 (右)R6 LDR光感 (左)R5 LDR光感 LDR_R 电位 LDR_L 电位 P3输入 P2输入 P1输出 P5输入 P6输入 P7输出 M2右电机 M1左电机 小车行进方向 : :: :: :: :: :: :: :: :: :: :: :: :: :: : 右 明 暗 0 1 0 1 0 1 0 1 1 0 左 左 暗 明 1 0 1 0 1 0 1 0 0 1 右 > 条件为黑色线路与白色路面 以车头相较线路偏向 右 为例： 1. 车头下部右侧R6光敏电阻将来到白色路面上方，而左侧R5光敏电阻将来到黑色线路上方。 2. R6阻值减小，R5阻值增大，LDR_R节点电位将低于LDR_L节点电位。 3. A比较器的P3引脚电位将低于P2引脚电位，B比较器的P5引脚电位将高于P6引脚电位。 4. A比较器的P1引脚将输出低电平，B比较器的P7引脚将输出高电平。 5. Q2PNP三极管导通，M2右电机启动，Q1PNP三极管截止，M1左电机停止。 6. 小车将向左行驶。 当车头相较线路偏向 左 时，小车同样会向右行驶。 这样无论偏左偏右，Triode Car都能自动的反向修正，达到沿着线路行驶的目的。 ## 巡线检测电路的校准 为了使巡线检测电路在单独使用LM393芯片控制的状态下有着对明暗变化更高的灵敏度，以及减少相同光照亮度下的电势差，需要通过手动调整可调电阻来进行校准。 校准步骤如下： 1. 将小车用小物件微微将轮子抬起以防接触表面，将小车的光敏电阻对准一个稳定光源（台灯或手电筒）。 2. 随意调整任一边可调电组，直到两侧马达同时运转。 3. 调整完成后，放置在跑道上测试结果。 4. 若小车还是有概率冲出跑道，将小车放置于白纸上，重复2~3步骤进行微调，尝试使巡线检测电路对明暗变化有更高的灵敏度。 ![](../assets/Triodecar_calibration_1.jpg) ![](../assets/Triodecar_calibration_2.jpg)"},"/Triode-Car/zh/no_translate.html":{"title":"no_translate_title","content":" title: no_translate_title class: md_page <div id \"visit_from\"></div> <div id \"no_translate_hint\">no_translate_hint</div> <div> <span id \"visit_hint\">visit_hint</span> <a id \"translate_src\"></a> </div> <div> <script> function getQueryVariable(variable) { var query window.location.search.substring(1); var vars query.split(\"&\"); for (var i 0;i<vars.length;i++) { var pair vars[i].split(\" \"); if(pair[0] variable){return pair[1];} } return(false); } var ref getQueryVariable(\"ref\"); var from getQueryVariable(\"from\"); var link document.getElementById(\"translate_src\"); var fromDis document.getElementById(\"visit_from\"); link.href ref; link.text ref; fromDis.innerHTML from; </script> </div>"}}