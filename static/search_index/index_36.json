{"/news/ESP-IDF/esp_idf_print_log.html":{"title":"香蕉派 BPI-Leaf-S3的正确吃法之ESP-IDF输出日志","content":" title: 香蕉派 BPI Leaf S3的正确吃法之ESP IDF输出日志 keywords: ESP IDF,入门,开源,ESP32 S3, date: 2023 03 27 tags: ESP IDF, 入门, 开源, ESP32 S3 本系列旨在交流 ESP32 S3 硬件开发环境的搭建，通过一些基本的示例来展示怎么用 ESP IDF (Espressif IoT Development Framework) 来安装、配置环境，并编译、下载固件至 BPI Leaf S3 开发板等步骤。如果有什么没提到或者有问题的，欢迎各位留言交流。 <! more > 原文链接: https://qubot.org/2023/03/27/print log in esp idf with bananapi bpi leaf s3/ 作者：[Qubot](https://qubot.org) 参考文献：https://www.bilibili.com/video/BV1KG4y1d7Ed/ ## 前言 在Arduino中，关于串口输出，只有Serial.print()这一个函数能够通过串口输出日志/报错等，但是在ESP IDF中，有好几种输出方式。这篇文章我们来聊一聊ESP32 S3在IDF中输出串口的多种方式 ## 安装前的准备 ### 必备硬件 * BPI Leaf S3开发板：[购买链接](https://item.taobao.com/item.htm?id 677287234553)（其他ESP32 S3板子也可以） ![](../assets/Leaf S3.png) * USB 数据线 (USB A 转 Type C) * 电脑（Windows、Linux 或 macOS都可以） ### 必备软件 * 安装好的ESP IDF环境，安装方法可以[参考这里](./esp_idf_setup.html) * VS Code ## 设置串口 在Arduino中，设置ESP32 S3的串口输出波特率是通过Serial.begin(9600)这个方法，而串口监视器的波特率是在打开串口监视器之后，点击右下角菜单选择的，如下图所示。 ![](../assets/serial_setup_in_idf_1.png) 而在ESP IDF中不是这样的，在ESP IDF中，需要在Menuconfig中设置。点击左下角第四个按钮，打开menuconfig设置 ![](../assets/serial_setup_in_idf_2.png) 然后按照如图步骤：①在搜索框内输入uart，②点击channel for console output下面的下拉菜单，③选择custom UART，④在UART console baud rate这一栏改成你想要的波特率（默认是115200），⑤点击保存并关闭窗口。这样我们就配置完毕了。 （注意我这里写的时候使用的ESP IDF版本可能和[孤独的二进制](https://space.bilibili.com/1375767826)使用的不太一样，他使用的版本还有monitor选项，即串口监视器的波特率设置。我这里没有monitor选项，可能集成到uart里面了？我测试过修改波特率之后在IDF的monitor中直接能打开，在Arduino IDE的串口监视器中修改成对应的波特率之后也能打开） ![](../assets/serial_setup_in_idf_3.png) ## 日志功能的使用 要想使用日志功能，我们需要先引入日志的库 ```c #include <esp_log.h> ``` 将鼠标对准“esp_log”，并右键>Go to Definition（或者对准这个按下F12，或者Ctrl+左键），会弹出一个小窗口，这个就是这个库的定义。 ![](../assets/serial_setup_in_idf_4.png) 左键点击图中箭头的位置，会在新窗口中打开这个库 ![](../assets/serial_setup_in_idf_5.png) 可以看到这里有一些日志类型的定义，我们可以在代码中写下所有的日志，并根据实际情况调整当前输出等级，从而控制日志输出的详细情况，比如调试的时候就切换成debug状态，让他输出debug信息，交付之后调成error，让它只显示报错。 ![](../assets/serial_setup_in_idf_6.png) 如果你想输出一个信息，就是ESP_LOG后面加信息类型，例如如果你想要错误信息，那就是ESP_LOGE(tag,\"你的信息\") 接下来我们看一个例子 ```c #include <stdio.h> #include <esp_log.h> void app_main(void) { printf(\"Hello World \\n\"); // E error, ESP_LOGE(\"香蕉库存\",\"一个不剩\"); // W warning; ESP_LOGW(\"香蕉库存\",\"香蕉只剩下2根了\"); // I Information; ESP_LOGI(\"香蕉库存\",\"香蕉还剩一吨\"); // D Debug; ESP_LOGD(\"香蕉库存\", \"香蕉还剩1吨, 已经消耗2吨.\"); // V Verbose; ESP_LOGV(\"香蕉库存\", \"香蕉还剩5吨, 已经消耗3吨. 每天消耗一吨, 还能撑5天\"); } ``` 点击左下角build,flash and monitor按钮，将这个例子下载到板子上面之后，你会发现串口输出只有E，W，I这三种信息，因为默认情况下IDF设置成的是INFO等级，选中这个等级意味着，information及以上的信息都会输出，这个输出等级需要在menuconfig里面设置一下。 ![](../assets/serial_setup_in_idf_7.png) 点击左下角menuconfig键，并在搜索框中输入log，如图我们能找到一个Log output的配置。将这个配置改成Verbose，这样Verbose及以上的信息才会都输出出来，最后一定记得要保存并关闭窗口。这样我们就能够看到所有的日志信息了。 ![](../assets/serial_setup_in_idf_8.png) 存储完之后，我们再次点击左下角build,flash and monitor按钮，将这个例子下载到板子上面之后，串口的输出就变成完整的所有信息了。 ![](../assets/serial_setup_in_idf_9.png) 另外我们在esp_log中可以看到这些输出信息的定义 ![](../assets/serial_setup_in_idf_10.png) 可以看到上面的\"香蕉库存\"是一个tag，我们可以用字符给它代替掉，以及后面的变量也可以通过%i代替掉，如下所示： ```c #include <stdio.h> #include <esp_log.h> const char* banana_storage \"香蕉库存\"; void app_main(void) { printf(\"Hello World \\n\"); // E error, ESP_LOGE(banana_storage,\"一个不剩\"); // W warning; ESP_LOGW(banana_storage,\"香蕉只剩下%i根了\",2); // I Information; ESP_LOGI(banana_storage,\"香蕉还剩%i吨\",1); // D Debug; ESP_LOGD(banana_storage, \"香蕉还剩1吨, 已经消耗2吨.\"); // V Verbose; ESP_LOGV(banana_storage, \"香蕉还剩5吨, 已经消耗3吨. 每天消耗一吨, 还能撑5天\"); } ``` ## 日志功能的进阶使用 输出怎么使用我们了解了，接下来就是实际应用了，上面只是说到了在menuconfig中手动改，我们也可以在实际程序中利用某个按键或者某个组合键来调整log输出等级。 在代码中，我们可以通过esp_log_level_set()这个函数来改变输出等级，Ctrl+左键可以看到它的定义和使用方法，前面是tag，后面是log的等级。 ![](../assets/serial_setup_in_idf_11.png) 至于等级有哪些？我们可以再次Ctrl+左键，可以看到就是我们刚才看到的这几个等级，这样，我们通过esp_log_level_set(banana_storage,ESP_LOG_VERBOSE)就能将输出等级设置为Verbose状态了。 ![](../assets/serial_setup_in_idf_12.png) 然后我们回到menuconfig中的log设置这里，可以看到这里有两个选项，一个是Default log verbosity，即默认输出等级，另一个是Maximum log verbosity，即最高输出等级。如图设置之后就是，默认输出等级为info，而最高可以调整到Verbose。保存之后退出 ![](../assets/serial_setup_in_idf_13.png) 然后在代码中加入一个bool变量（这里有些奇怪，可能库的版本不一样，我在Mac上面的IDF可以直接用bool变量，但是在这里需要引入stdbool.h这个库） ```c #include <stdbool.h> bool secretLog false; ``` 加一个判断 ```c if (secretLog true) { esp_log_level_set(banana_storage,ESP_LOG_VERBOSE); } ``` 最终如下 ```c #include <stdio.h> #include <esp_log.h> #include <stdbool.h> const char* banana_storage \"香蕉库存\"; bool secretLog false; void app_main(void) { if (secretLog true) { esp_log_level_set(banana_storage,ESP_LOG_VERBOSE); } printf(\"Hello World \\n\"); // E error, ESP_LOGE(banana_storage,\"一个不剩\"); // W warning; ESP_LOGW(banana_storage,\"香蕉只剩下%i根了\",2); // I Information; ESP_LOGI(banana_storage,\"香蕉还剩%i吨\",1); // D Debug; ESP_LOGD(banana_storage, \"香蕉还剩1吨, 已经消耗2吨.\"); // V Verbose; ESP_LOGV(banana_storage, \"香蕉还剩5吨, 已经消耗3吨. 每天消耗一吨, 还能撑5天\"); } ``` 下载到板子上之后会发现，目前串口输出只有E,W,I，如下所示 ![](../assets/serial_setup_in_idf_14.png) 然后我们将 ```c bool secretLog false; ``` 改为 ```c bool secretLog true; ``` 会发现,输出中E,W,I,D,V都出现了 ![](../assets/serial_setup_in_idf_15.png) ## 总结 日志在我们调试过程中非常重要，本文讨论了如何将日志输出出来，方便我们调试，以及如何通过一个变量隐藏掉部分等级的日志，让用户看不到，或者重新设置为完整输出。"},"/news/ESP-IDF/esp_idf_blink.html":{"title":"香蕉派 BPI-Leaf-S3的正确吃法之使用ESP-IDF点灯","content":" title: 香蕉派 BPI Leaf S3的正确吃法之使用ESP IDF点灯 keywords: ESP IDF,入门,开源,ESP32 S3, date: 2023 03 31 tags: ESP IDF, 入门, 开源, ESP32 S3 本系列旨在交流 ESP32 S3 硬件开发环境的搭建，通过一些基本的示例来展示怎么用 ESP IDF (Espressif IoT Development Framework) 来安装、配置环境，并编译、下载固件至 BPI Leaf S3 开发板等步骤。如果有什么没提到或者有问题的，欢迎各位留言交流。 <! more > 原文链接: https://qubot.org/2023/03/31/blink via esp idf with bananapi bpi leaf s3 作者：[Qubot](https://qubot.org) 参考文献：https://www.bilibili.com/video/BV1nR4y1o7VE ## 前言 在[这篇文章](./esp_idf_print_log.html) 中，我们学习了如何使用IDF写一个Hello World，接下来我们尝试着来一个硬件界的Hello World 点灯。并拿点灯举例子，讨论怎么找到一个库并使用起来。 ## 开始前的准备 ### 必备硬件 * BPI Leaf S3开发板：[购买链接](https://item.taobao.com/item.htm?id 677287234553)（其他ESP32 S3板子也可以） ![](../assets/Leaf S3.png) * LED灯 X 1 * 限流电阻 X 1（一般的led都需要，不然可能会烧） * USB 数据线 (USB A 转 Type C) * 电脑（Windows、Linux 或 macOS都可以） ### 必备软件 * 安装好的ESP IDF环境，安装方法可以[参考这里](./esp_idf_setup.html) * VS Code ## 查找库 之前我们在[香蕉派 BPI Leaf S3的正确吃法之ESP IDF创建循环](./esp_idf_loop.html)文章里面提到，想要找到IDF的库，需要在esp idf\\components这个目录看，可以看到这个目录里面有这些库： ![](../assets/blink_with_idf_1.png) 其中gpio属于硬件驱动部分，所以应该在driver目录下面，找到里面的includ，打开deiver，再往下看就能看到： ![](../assets/blink_with_idf_2.png) 所以调用的库应该是 ```c #include \"driver/gpio.h\" ``` 另外要想使灯闪烁，那就需要延迟，就上次用到的库： ```c #include \"freertos/FreeRTOS.h\" #include \"freertos/Task.h\" ``` ## GPIO使用 要想使用某个gpio，我们需要首先将这个gpio初始化，就要用到gpio_reset_pin()函数了,在代码中输入这个函数，然后Ctrl+左键点击gpio_reset_pin()，就能转跳到这个函数定义的地方： ![](../assets/blink_with_idf_3.png) 如图，这里是定义的地方，其中括号里需要填的变量就是gpio number，而gpio number具体是怎么填，就需要Ctrl+左键点击gpio_num_t这个类型定义 ![](../assets/blink_with_idf_4.png) 可以看到，这里定义GPIO名字，这里我用的是gpio4，所以括号内填GPIO_NUM_4或者4都可以 ![](../assets/blink_with_idf_5.png) ```c gpio_reset_pin(4) ``` 或者 ```c gpio_reset_pin(GPIO_NUM_4) ``` 然后是和arduino里面一样，设置输入输出，就是用到gpio_set_direction()函数，至于里面怎么填，Ctrl+左键转跳到定义的地方，如下所示： ![](../assets/blink_with_idf_6.png) 可以看到，里面需要填两个参数，一个是gpio munber，另一个是mode，而mode是什么，我们Ctrl+左键点击变量类型“gpio_mode_t”继续看定义的地方： ![](../assets/blink_with_idf_7.png) 可以看到这是一个枚举类型，其中有六种类型，我们是点灯，所以是输出，即GPIO_MODE_OUTPUT这个类型，所以： ```c gpio_set_direction(4,GPIO_MODE_OUTPUT); ``` 接下来是点灯，while循环，然后while循环内加上我们的点灯代码： ```c while(true) { } ``` 输出高低电平用到的函数是gpio_set_level()函数，同样的，用Ctrl+左键找到定义的地方： ![](../assets/blink_with_idf_8.png) 可以看到，里面填number和level，其中level是一个uint32的类型，我们可以在最上面新建一个uint32的变量： ```c uint_t status 0; ``` 然后在gpio_set_level()变量中加入值 ```c gpio_set_level(4,status); ``` 想要闪烁，就得将状态取个反： ```c status !status; ``` 最后加上之前文章提到的延迟，最终结果就是： ```c #include <stdio.h> #include \"driver/gpio.h\" #include \"freertos/FreeRTOS.h\" #include \"freertos/Task.h\" int delaytime 1000; uint32_t status 0; void app_main(void) { gpio_reset_pin(4); gpio_set_direction(4,GPIO_MODE_OUTPUT); while(true) { gpio_set_level(4,status); status !status; vTaskDelay(delaytime/portTICK_PERIOD_MS); // 100 Ticks 1ms } } ``` 下载到板子上面后，这个是最终效果： <video src \"../assets/blink_with_idf_9.mp4\" controls \"controls\" preload \"auto\">your brower not support play video</video> ## 总结 循环在我们程序中非常常见，我们这篇文章回顾了循环的用法，简单了解了freertos的分时运行，以及如何使用vTaskDelay函数做出arduino中delay的效果。"},"/news/ESP-IDF/esp_idf_build_project.html":{"title":"香蕉派 BPI-Leaf-S3的正确吃法之ESP-IDF新建项目","content":" title: 香蕉派 BPI Leaf S3的正确吃法之ESP IDF新建项目 keywords: ESP IDF,入门,开源,ESP32 S3, date: 2023 03 22 tags: ESP IDF, 入门, 开源, ESP32 S3 本系列旨在交流 ESP32 S3 硬件开发环境的搭建，通过一些基本的示例来展示怎么用 ESP IDF (Espressif IoT Development Framework) 来安装、配置环境，并编译、下载固件至 ESP32 S3 开发板等步骤。如果有什么没提到或者有问题的，欢迎各位留言交流。 <! more > 原文链接: https://qubot.org/2023/03/22/build a new esp idf project for bananapi bpi leaf s3/ 作者：[Qubot](https://qubot.org) ## 前言 上一篇文章介绍了ESP IDF的安装，这一篇文章来创建一个IDF项目，并将它下载到我们的Leaf S3上。 ## 安装前的准备 ### 必备硬件 * BPI Leaf S3开发板：[购买链接](https://item.taobao.com/item.htm?id 677287234553)（其他ESP32 S3板子也可以） ![](../assets/Leaf S3.png) * USB 数据线 (USB A 转 Type C) * 电脑（Windows、Linux 或 macOS都可以） ### 必备软件 * 安装好的ESP IDF环境，安装方法可以[参考这里](./esp_idf_setup.html) * VS Code ## 新建项目 首先是打开VSCode，Ctrl+Shift+P打开Command palette，输入ESP IDF: New roject并选择第一个选项。 ![](../assets/ESP IDF_build_project_1.png) 然后选择项目名称，路径，板子的版型以及串口号，需要注意的是，如果你是第一次使用BPI Leaf S3，你需要按住boot键后复位，进入到下载模式，选择完毕后，点击左下角的Choose Template按键. ![](../assets/ESP IDF_build_project_2.png) 接下来就是根据模板创建项目，左上角选择ESP IDF,然后选择get start下面的hello_world(也可以选其他的，根据你的需求)，最后点击右边上面的使用start下面的hello_world模板创建项目。 ![](../assets/ESP IDF_build_project_3.png) 然后左下角会弹出窗口，项目已经创建好，问是否在新窗口打开项目，这里点yes。 ![](../assets/ESP IDF_build_project_4.png) 这时VSCode会打开一个新窗口，之前的那个窗口就可以关闭了，看到新窗口中左边目录的main >main.c，双击打开，这个就是我们的主程序了。 ![](../assets/ESP IDF_build_project_5.png) ## 下载代码 项目创建完成之后，将代码输进去，这只是一个输出Hello World的代码，其中\\n是换行 ```c #include <stdio.h> void app_main(void) { printf(\"Hello World \\n\"); } ``` 由于我们的板子是8M的flash，所以需要配置一下Flash的大小，点一下左下角的齿轮按钮（nemuconfig），等一下之后会出现一个窗口，在上面的搜索框输入flash，找到Flash size，选择8MB，点击保存之后关掉窗口即可。 ![](../assets/ESP IDF_build_project_7.png) 配置好了之后，看一下左下角这些按键，左下角有一堆按钮，其中第一个为选择串口（就是选择你开发板的COM口），第二个是选择版型（ESP32/ESP32 S2/ESP32 S3等等），第三个是打开新的IDF项目，第四个是menuconfig配置，第五个是清除所有缓存（中间文件之类的？），第六个是build整个项目，第七个是选择烧录方式（jtag，串口，dfu），第八个是烧录键，第九个是打开串口监视器，第十个是build并烧录，打开串口监视器，第十一个是打开IDF的终端（如果你习惯了命令的话，可以在这里输入命令执行），第十二个好像是可以自定义按钮？执行自定义任务。 ![](../assets/ESP IDF_build_project_6.png) 熟悉完按键就能编译下载了，点击左下角第六个build按钮开始编译，编译结束之后，点击flash按钮，等显示Hard resetting via RTS pin...的时候就说明下载完成了，这时候需要按一下板子的复位键。 ![](../assets/ESP IDF_build_project_8.png) 复位完成之后，点击左下角的monitor按键，这时会出现一堆输出信息，可以看到最下面有一段Hello world，这就说明下载完成了，代码开始运行。 ![](../assets/ESP IDF_build_project_9.png) ## 总结 这一步我们熟悉了如何将程序下载到板子上面，运行了最简单的Hello World程序，整体上没有什么大的难点，主要是BPI Leaf S3用的是原生USB，需要手动进到下载模式，等第一次烧录完IDF代码后，后面就不用进下载模式了。"},"/news/ESP-IDF/esp_idf_loop.html":{"title":"香蕉派 BPI-Leaf-S3的正确吃法之ESP-IDF创建循环","content":" title: 香蕉派 BPI Leaf S3的正确吃法之ESP IDF创建循环 keywords: ESP IDF,入门,开源,ESP32 S3, date: 2023 03 28 tags: ESP IDF, 入门, 开源, ESP32 S3 本系列旨在交流 ESP32 S3 硬件开发环境的搭建，通过一些基本的示例来展示怎么用 ESP IDF (Espressif IoT Development Framework) 来安装、配置环境，并编译、下载固件至 BPI Leaf S3 开发板等步骤。如果有什么没提到或者有问题的，欢迎各位留言交流。 <! more > 原文链接: https://qubot.org/2023/03/28/build loop in esp idf with bananapi bpi leaf s3 作者：[Qubot](https://qubot.org) 参考文献：https://www.bilibili.com/video/BV1S3411f71Z/ ## 前言 在Arduino中，有setup和loop两个函数，但是在ESP IDF中没有loop函数，那在ESP IDF中的循环是怎么实现的呢？这次我们来讨论一下 ## 开始前的准备 ### 必备硬件 * BPI Leaf S3开发板：[购买链接](https://item.taobao.com/item.htm?id 677287234553)（其他ESP32 S3板子也可以） ![](../assets/Leaf S3.png) * USB 数据线 (USB A 转 Type C) * 电脑（Windows、Linux 或 macOS都可以） ### 必备软件 * 安装好的ESP IDF环境，安装方法可以[参考这里](./esp_idf_setup.html) * VS Code ## 创建循环 在Arduino中，如果想要不停循环输出，只需把想要循环的内容放到loop里面就行，如下面例子所示，每1秒会输出一次Hello World： ```c void setup() { // initialize serial communication at 9600 bits per second: Serial.begin(9600); } void loop() { // print out Hello World: Serial.println(\"Hello World\"); // delay between each print： delay(1000); } ``` 但是在IDF中，是没有loop的，我们可以利用while或者for直接写成死循环： ```c whild(true) { } ``` 或者 ```c for(;;) { } ``` 而输出可以利用pringf()或者上一篇文章所写的ESP_LOGI(),但是不能只写输出，还得加上延迟，在IDF中，没有delay(1000)这个函数，我们这里得用到freertos里的trick，这是我们需要了解一下分时的概念。 ## ticks的概念 FreeRTOS是一个实时操作系统，它会在一定时间内轮流执行所有任务，而宏观的来看，就像是在同时运行一样，而在FreeRTOS中，时间的最小单位就是1 tick。 ![](../assets/build_loop_in_idf_1.jpg) 在实际程序中，你可以分配每个任务执行多少个ticks,这个值是可以自己设定的，默认1个tick是10ms，这个在menuconfig中就可以设置，如下图所示，搜索tick即可看到 ![](../assets/build_loop_in_idf_2.png) ## ticks的使用 要想使用ticks，那么必须引用ticks的库，类似于Arduino的libraries文件夹，IDF的库一般都在esp idf安装目录的components文件夹，就是第一篇文章中的esp idf安装目录，我的在C:\\Users\\Qubot\\esp\\esp idf\\components这里，在这里能看到，有一个freertos文件夹，而在这个目录下，就是FreeRTOS具体的库分类，打开FreeRTOS Kernel\\include\\freertos（Mac和linux下可能不太一样）可以看到如下所有库，其中Task是我们delay要用到的，而FreeRTOS.h也是Task要调用的库。 ![](../assets/build_loop_in_idf_3.png) 在代码最前面加上 ```c #include \"freertos/FreeRTOS.h\" #include \"freertos/Task.h\" ``` 如果最上面显示库没找到，那么可以Ctrl+Shift+P打开command，输入并选择ESP IDF: Add vscode configuration folder导入库 ![](../assets/build_loop_in_idf_4.png) 在IDF中，delay用的是vTaskDelay()这个函数，所以完整的代码如下： ```c #include <stdio.h> #include <esp_log.h> #include \"freertos/FreeRTOS.h\" #include \"freertos/Task.h\" void app_main(void) { while(true) { ESP_LOGI(\"hello\",\"Hello World\"); vTaskDelay(100); } } ``` 下载到板子上之后，会发现，串口会1s输出一次Hello World，下面每一行前面的括号内的数字为启动之后的毫秒数 ![](../assets/build_loop_in_idf_5.png) ## ticks的高级用法 上面有提到，menuconfig里面能修改ticks的频率，那一旦我们改了频率，代码中的值就需要改变，这时我们就需要用到一个常量：portTICK_PERIOD_MS,我们把它输出出来： ```c ESP_LOGI(\"hello\",\"Ticks(ms): %lu\", portTICK_PERIOD_MS); ``` 可以看到每个Ticks是10ms，也就是我们menuconfig中设置的tick频率100hz。 ![](../assets/build_loop_in_idf_6.png) 所以我们可以新建一个变量，例如 ```c int delaytime 1000; ``` 然后将delaytime/portTICK_PERIOD_MS放到vTaskDelay函数内就行了，如下例子： ```c #include <stdio.h> #include <esp_log.h> #include \"freertos/FreeRTOS.h\" #include \"freertos/Task.h\" int delaytime 1000; void app_main(void) { while(true) { ESP_LOGI(\"hello\",\"Ticks(ms): %lu\", portTICK_PERIOD_MS); ESP_LOGI(\"hello\",\"Hello World\"); vTaskDelay(delaytime/portTICK_PERIOD_MS); // 100 Ticks 1ms } } ``` 以后不管menuconfig中怎么配置频率，想要delay多久，直接改delaytime这个函数就可以了 ## 总结 循环在我们程序中非常常见，我们这篇文章回顾了循环的用法，简单了解了freertos的分时运行，以及如何使用vTaskDelay函数做出arduino中delay的效果。"},"/news/ESP-IDF/esp_idf_setup.html":{"title":"香蕉派 BPI-Leaf-S3的正确吃法之ESP-IDF的安装","content":" title: 香蕉派 BPI Leaf S3的正确吃法之ESP IDF的安装 keywords: ESP IDF,入门,开源,ESP32 S3, date: 2023 03 21 tags: ESP IDF, 入门, 开源, ESP32 S3 本系列旨在交流 ESP32 S3 硬件开发环境的搭建，通过一些基本的示例来展示怎么用 ESP IDF (Espressif IoT Development Framework) 来安装、配置环境，并编译、下载固件至 ESP32 S3 开发板等步骤。如果有什么没提到或者有问题的，欢迎各位留言交流。 <! more > 原文链接: https://qubot.org/2023/03/22/install esp idf for bananapi bpi leaf s3/ 作者：[Qubot](https://qubot.org) ## 前言 ESP IDF是一个面向ESP32系列的官方开发框架，用于开发嵌入式应用程序。目前ESP IDF已经支持了很多芯片，下面是具体的型号。 ![](../assets/SupportTable.png) 最新的支持列表在[这里](https://github.com/espressif/esp idf/blob/master/README_CN.md) 获取 ## 安装前的准备 ### 必备硬件 * BPI Leaf S3开发板：[购买链接](https://item.taobao.com/item.htm?id 677287234553)（其他ESP32板子也可以） ![](../assets/Leaf S3.png) * USB 数据线 (USB A 转 Type C) * 电脑（Windows、Linux 或 macOS都可以） ### 必备软件 在安装ESP IDF之前，需要安装一些必要的软件： * Git：用于从GitHub上克隆ESP IDF存储库。 * Python：ESP IDF需要Python 3.5或更高版本。 * CMake：用于生成构建文件。 #### Windows系统 在Windows系统中，可以从以下链接下载和安装这些软件： Git: https://git scm.com/download/win Python: https://www.python.org/downloads/windows/ CMake: https://cmake.org/download/ #### Linux系统 在Linux系统中，可以使用以下命令来安装这些软件（Linux下我没有装过，这里是根据官方文档加上的）： * Ubuntu 和 Debian: ```shell sudo apt get install git wget flex bison gperf python3 python3 venv python3 setuptools cmake ninja build ccache libffi dev libssl dev dfu util libusb 1.0 0 ``` * CentOS 7 & 8（官方这里说为了好的体验建议用CentOS 8）: ```shell sudo yum y update && sudo yum install git wget flex bison gperf python3 python3 setuptools cmake ninja build ccache dfu util libusbx ``` * Arch: ```shell sudo pacman S needed gcc git make flex bison gperf python cmake ninja ccache dfu util libusb ``` #### MacOS系统 在MacOS中，需要先安装一个HomeBrew（MacPorts也行，不过没试过） ```shell brew install cmake ninja dfu util ``` 或者（MacPorts下） ```shell sudo port install cmake ninja dfu util ``` 如果你想加快编译速度，需要装一个ccache ```shell brew install ccache ``` 或者（MacPorts下） ```shell sudo port install ccache ``` ## 安装 我这里是基于VS Code的安装，所以首先需要再安装一个VS Code，下载地址：[Visual Studio Code](https://code.visualstudio.com/) 安装完成之后，单击 Visual Studio Code 一侧活动栏中的扩展图标，打开扩展视图或者快捷键Ctrl+Shift+X，Mac下是⇧+⌘+X），并在搜索框内输入idf搜索，下面第一个就是，点击Install安装，并等待右下角加载完 ![](../assets/search_idf.png) 点击右上角的View > Command Palette（或者Ctrl+Shift+P，Mac下是⇧+⌘+P），输入ESP IDF: Configure（不分大小写）并选择第一个 ![](../assets/ESP IDF_Configure.png) 接下来就是开始下载选择ESP IDF安装在哪里，点击EXPRESS选择快速安装（或者如果你已经安装了 ESP IDF，则使用现有设置，选择第三个） ![](../assets/ESP IDF_Configure_1.png) 这一步是选择下载源（Github还是Espressif），IDF的版本（这里我选择的是5.0.1），IDF容器的路径（这里是Docker安装？）以及IDF工具的路径，选好之后点Install ![](../assets/ESP IDF_Configure_2.png) 接下来等待安装完成就行了，如果你在国内，可能会遇到网络故障问题，需要你自备工具解决，如果没有的话就反复安装就行。（或者选择spressif源试试？这个我没试过） ![](../assets/ESP IDF_Configure_3.png) 安装结束之后，会如图显示All settings have been configured. You can close this window. ![](../assets/ESP IDF_Configure_4.png) ## 总结 ESP IDF的安装不难，主要是网络问题，国内用户可能会反复安装好几次，其他的不会有什么大的问题。"},"/news/index.html":{"title":"动态","content":" title: 动态 keywords: teedoc, 博客生成, 静态博客 desc: teedoc 静态博客页面生成 show_source: false date: true <div id \"blog_list\"></div>"}}