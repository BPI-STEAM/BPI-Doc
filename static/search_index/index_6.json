{"/Centi_S3_doc/en/MicroPython/What_is_MicroPython.html":{"title":"","content":"## What is MicroPython? ![](../assets/images/Mircopython.png) [MicroPython](https://micropython.org/) is a lean and efficient implementation of the Python 3 programming language that includes a small subset of the Python standard library and is optimised to run on microcontrollers and in constrained environments. Crowdfunded and open sourced in 2013 by [Damien P. George](https://dpgeorge.net/). The most obvious difference between it and the use of C programs to develop microcontrollers is that there is no need for lengthy compilation when verifying code. Using serial communication software, enter commands through the REPL(read eval print loop) to control the microcontroller, just like Python's REPL. It is also possible to use some tools to upload a python script file to run inside the microcontroller. Its implementation of Python3 includes the _thread library that supports multithreading and the asyncio library for writing concurrent code. MicroPython aims to be as compatible with normal Python as possible to allow you to transfer code with ease from the desktop to a microcontroller or embedded system. At the same time it also has some libraries specific for microcontrollers in order to take full advantage of the hardware features inside the microcontroller chip, such as timers, hardware interrupts, WiFi, etc., depending on the specific hardware. While having the above features, it is compact enough to fit and run within just 256k of code space and 16k of RAM. If you know Python you already know MicroPython. On the other hand, the more you learn about MicroPython the better you become at Python."},"/Centi_S3_doc/en/MicroPython/Display_text.html":{"title":"","content":"## Display text characters <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/MAvLjCMQ93s?si auUGEEG4a_E2GK_j\" title \"YouTube video player\" frameborder \"0\" allow \"accelerometer; autoplay; clipboard write; encrypted media; gyroscope; picture in picture; web share\" allowfullscreen></iframe> ### text method `text(font, s, x, y {, fg, bg, alpha})` Write text to the display using the specified bitmap `font` with the coordinates as the upper left corner of the text. The optional arguments `fg` and `bg` can set the foreground and background colors of the text; otherwise the foreground color defaults to `WHITE`, and the background color defaults to `BLACK`. `alpha` defaults to 255. See the [README.md](https://github.com/russhughes/st7789s3_esp_lcd/tree/main/fonts/bitmap) in the `fonts/bitmap` directory for example fonts. ### bitmap font The BPI Centi S3 factory firmware contains two bitmap font files. `vga1_8x16.mpy` `vga1_bold_16x32.mpy` They come from https://github.com/russhughes/st7789s3_esp_lcd/tree/main/fonts/bitmap. From this I selected these two most commonly used, using [MPY CROSS Tool] (https://pypi.org/project/mpy cross/) to transform them into a `.mpy` format to reduce the volume of files. ### download font file If you mistakenly delete the font file or erase the Flash, you need to download the font file again. You can download it from the previous text link, or you can download the fonts in the link below to the font of the `.mpy` format, including the example below. [From here to download fonts and examples] (https://github.com/bpi team/bpi s3 doc/micropython_example/04_display_text) ### Display text ![](../assets/images/Display_text_1.jpg) ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config import vga1_8x16 import vga1_bold_16x32 \"\"\" These default colors can be used: BLACK BLUE CYAN GREEN MAGENTA RED YELLOW WHITE TRANSPARENT Custom RGB colors: color565(255,255,255) \"\"\" fg st7789.BLACK bg st7789.WHITE text_x 10 text_y 10 def main(): try: tft tft_config.config(rotation 1) tft.init() tft.fill(st7789.WHITE) tft.text(vga1_8x16, \"Hello World!\", text_x, text_y, fg, bg, 255) tft.text(vga1_bold_16x32, \"MicroPython!\", text_x, text_y+16, fg, bg, 255) tft.text(vga1_8x16, \"vga1_8x16\", text_x, text_y+16+32, fg, bg, 255) tft.text(vga1_bold_16x32, \"vga1_bold_16x32\", text_x, text_y+16+32+16, fg, bg, 255) tft.show() except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ``` ### Use a transparent background and Alpha channel to make shadow fonts ![](../assets/images/Display_text_2.jpg) The reasonable use of `st7789.TRANSPARENT` as the background color of the text can make the background of the text not change. By setting the alpha parameter in the text method, the overall transparency of the text can be changed, with a range of 0 ~ 255. ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config import vga1_8x16 import vga1_bold_16x32 \"\"\" These default colors can be used: BLACK BLUE CYAN GREEN MAGENTA RED YELLOW WHITE TRANSPARENT Custom RGB colors: color565(255,255,255) \"\"\" fg st7789.BLACK bg st7789.TRANSPARENT text_x 10 text_y 50 def main(): try: tft tft_config.config(rotation 1) tft.init() tft.fill(st7789.WHITE) tft.text(vga1_8x16, \"Hello World!\", text_x 1, text_y 1, fg, bg, 205) tft.text(vga1_bold_16x32, \"MicroPython!\", text_x 2, text_y+16 2, fg, bg, 205) tft.text(vga1_8x16, \"Hello World!\", text_x, text_y, fg, bg, 255) tft.text(vga1_bold_16x32, \"MicroPython!\", text_x, text_y+16, fg, bg, 255) tft.show() except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ```"},"/Centi_S3_doc/en/MicroPython/REPL_use_case.html":{"title":"","content":"## REPL Use Case ### REPL shortcut keys 1. Copy `ctrl + shift + c`. 2. Paste `ctrl + shift + v`. Use the left mouse button to drag and select the command to be copied in the REPL, press the copy shortcut key on the keyboard, and then press the paste shortcut key to copy and paste the command. 3. Soft reset `ctrl + d`. 4. Interrupt `ctrl + c`, interrupt the currently executing program, but will not restart and reset. ### View built in modules 1. Entering `help(\"modules\")` in the REPL will list all modules in the current CircuitPython development board. 2. After importing the module, you can use the `help()` function to view the function names or variable names available inside the module. ```py import machine help(machine) ```"},"/Centi_S3_doc/en/MicroPython/Display_multiple_vector_fonts.html":{"title":"","content":"## Display multiple vector fonts ### draw method `draw(vector_font, s, x, y {, fg, scale, alpha})` Draw text to the display using the specified Hershey vector font with the coordinates as the lower left corner of the text. The foreground color of the text can be set by the optional argument fg. Otherwise the foreground color defaults to WHITE. The size of the text can be scaled by specifying a scale value. The scale value must be larger than 0 and can be a floating point or an integer value. The scale value defaults to 1.0. alpha defaults to 255. ### draw_len method `draw_len(vector_font, s {, scale})` Returns the string's width in pixels if drawn with the specified font. ### Download vector font library There is a vector font library in py file format in the [GitHub:russhughes/st7789s3_esp_lcd/fonts/vector](https://github.com/russhughes/st7789s3_esp_lcd/tree/main/fonts/vector), and there are pictures of all fonts in the README. In [example lib](https://github.com/BPI STEAM/BPI Centi S3 Doc/tree/main/micropython_example/07_display_multiple_vector_fonts/lib), you can also download the converted mpy file format vector font library, taking up less flash space. ### Display multiple vector fonts and refresh continuously The width of the string to be displayed can be obtained through the draw_len method, but the height of some of the provided vector fonts will exceed the set value. If you need to keep the text box completely covering it, you need to modify the corresponding code to increase the height of the text box. > [Download the complete example from this GitHub link](https://github.com/BPI STEAM/BPI Centi S3 Doc/tree/main/micropython_example/07_display_multiple_vector_fonts) ![](../assets/images/pic_4.jpg) ![](../assets/images/Display_multiple_vector_fonts_2.jpg) ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config import gotheng import italicc import romanc import time import gc from math import ceil \"\"\" These default colors can be used: BLACK BLUE CYAN GREEN MAGENTA RED YELLOW WHITE TRANSPARENT Custom RGB colors: color565(255,255,255) \"\"\" class DrawRect: def __init__(self): self.tft None self.text_y None self.text_x None self.rect_x None self.rect_y None self.rect_height None self.rect_width None def rect(self, tft, vector_font, scale, text, text_coord, fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 255): self.tft tft self.rect_width self.tft.draw_len(vector_font, text, scale) self.rect_height ceil(vector_font.HEIGHT * scale) self.text_x text_coord[0] self.text_y text_coord[1] self.rect_x ceil(self.text_x vector_font.WIDTH * scale / 8) self.rect_y round(self.text_y vector_font.HEIGHT * scale / 2 + 1) self.tft.fill_rect(self.rect_x, self.rect_y, self.rect_width, self.rect_height, bg, alpha_rect) self.tft.draw(vector_font, text, self.text_x, self.text_y, fg, scale, alpha_text) def erase(self, bg): buffer, _, _ self.tft.jpg_decode(bg, self.rect_x, self.rect_y, self.rect_width, self.rect_height) self.tft.blit_buffer(buffer, self.rect_x, self.rect_y, self.rect_width, self.rect_height) def main(): try: tft tft_config.config(rotation 1) tft.init() jpg 'pic_4.jpg' tft.jpg(jpg, 0, 0) text_x 10 text_y 20 text_list [ \" !\\\"#$%&'()*+, ./\", \"0123456789:;< >?\", \"@ABCDEFGHIJKLMNO\", \"PQRSTUVWXYZ[\\]^_\", \"`abcdefghijklmno\", \"pqrstuvwxyz{}~\", ] draw_rect_1 DrawRect() draw_rect_2 DrawRect() draw_rect_3 DrawRect() while True: for i in text_list: draw_rect_1.rect(tft, gotheng, 0.8, i, (text_x, text_y), fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 20) draw_rect_2.rect(tft, italicc, 0.8, i, (text_x, text_y+32), fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 40) draw_rect_3.rect(tft, romanc, 0.8, i, (text_x, text_y + 64), fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 60) tft.show() time.sleep(0.5) draw_rect_1.erase(bg jpg) draw_rect_2.erase(bg jpg) draw_rect_3.erase(bg jpg) gc.collect() except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ``` ### Enlarge or reduce font size You can control the font size by modifying the scale value of the draw method. ![](../assets/images/Display_multiple_vector_fonts_1.jpg) ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config import gotheng import italicc import romanc import time import gc from math import ceil \"\"\" These default colors can be used: BLACK BLUE CYAN GREEN MAGENTA RED YELLOW WHITE TRANSPARENT Custom RGB colors: color565(255,255,255) \"\"\" class DrawRect: def __init__(self): self.tft None self.text_y None self.text_x None self.rect_x None self.rect_y None self.rect_height None self.rect_width None def rect(self, tft, vector_font, scale, text, text_coord, fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 255): self.tft tft self.rect_width self.tft.draw_len(vector_font, text, scale) self.rect_height ceil(vector_font.HEIGHT * scale) self.text_x text_coord[0] self.text_y text_coord[1] self.rect_x ceil(self.text_x vector_font.WIDTH * scale / 8) self.rect_y round(self.text_y vector_font.HEIGHT * scale / 2 + 1) self.tft.fill_rect(self.rect_x, self.rect_y, self.rect_width, self.rect_height, bg, alpha_rect) self.tft.draw(vector_font, text, self.text_x, self.text_y, fg, scale, alpha_text) def erase(self, bg): buffer, _, _ self.tft.jpg_decode(bg, self.rect_x, self.rect_y, self.rect_width, self.rect_height) self.tft.blit_buffer(buffer, self.rect_x, self.rect_y, self.rect_width, self.rect_height) def main(): try: tft tft_config.config(rotation 1) tft.init() jpg 'pic_4.jpg' tft.jpg(jpg, 0, 0) text_x 10 text_y 20 text_list [ \"!\\\"#$%&'()*\", \"0123456789\", \"ABCDEFGHI\", \"PQRSTUVWX\", \"abcdefghij\", \"pqrstuvwxy\", ] draw_rect_1 DrawRect() draw_rect_2 DrawRect() draw_rect_3 DrawRect() while True: for i in text_list: draw_rect_1.rect(tft, romanc, 0.5, i, (text_x, text_y), fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 20) draw_rect_2.rect(tft, romanc, 1, i, (text_x, text_y+24), fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 40) draw_rect_3.rect(tft, romanc, 1.5, i, (text_x, text_y + 64), fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 60) tft.show() time.sleep(0.5) draw_rect_1.erase(bg jpg) draw_rect_2.erase(bg jpg) draw_rect_3.erase(bg jpg) gc.collect() except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ```"},"/Centi_S3_doc/en/MicroPython/lcd_init.html":{"title":"","content":"## LCD Screen init There is a 1.9 inch TFT LCD color screen on the front of BPI Centi S3 with a resolution of 170*320. The driver chip is ST7789V3, which is connected to the ESP32S3 chip through an 8 bit parallel interface. The ST7789 C module driver has been integrated in the factory firmware, from: [russhughes/st7789s3_esp_lcd](https://github.com/russhughes/st7789s3_esp_lcd), The MIT License Thanks to russhughes for the open source, you can check the compilation method and all API interfaces in his GitHub README. ### Initialize, light up the screen <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/YANtoaNBQw4\" title \"YouTube video player\" frameborder \"0\" allow \"accelerometer; autoplay; clipboard write; encrypted media; gyroscope; picture in picture; web share\" allowfullscreen></iframe> Create a main.py in the local folder, copy the code below into it, and save the file. > Use the `ctrl + S` shortcut to save the file in the current window. ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 from machine import freq def config(rotation 0, options 0): return st7789.ST7789( 170, 320, 15, 14, 13, 12, 11, 10, 9, 8, wr 6, rd 7, reset 3, dc 5, cs 4, backlight 2, power 2, rotation rotation, options options) freq(240_000_000) # Set esp32s3 cpu frequency to 240MHz tft config(rotation 1, options 0) tft.init() # Initialize tft.fill(st7789.RED) tft. show(True) tft.deinit() # Deinitialize the display or it will cause a crash on the next run ``` Use mpbridge to synchronize files to the development board. When the synchronization is complete, the BPI Centi S3 screen will be full screen red. ### Separate configuration files We can place the code for initializing and configuring ST7789 in a python script file, and then import and use it anywhere else, including in the REPL, which can enhance code reusability. Create a separate configuration file tft_config.py , copy the code below into it, and save the file. ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 from machine import freq def config(rotation 0, options 0): return st7789.ST7789( 170, 320, 15, 14, 13, 12, 11, 10, 9, 8, wr 6, rd 7, reset 3, dc 5, cs 4, backlight 2, power 2, rotation rotation, options options) freq(240_000_000) # Set esp32s3 cpu frequency to 240MHz ``` Modify main.py to the following code: ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config tft tft_config.config(rotation 1, options 0) tft.init() tft.fill(st7789.RED) tft. show(True) tft.deinit() # Deinitialize the display or it will cause a crash on the next run ``` Use mpbridge to synchronize files to the development board. Later we can simply import and initialize the screen like this."},"/Centi_S3_doc/en/MicroPython/Make_semi-transparent_rectangular_text_box.html":{"title":"","content":"## Make semi transparent rectangular text box <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/qnfZCrlbGss?si LhywE4zOzX0QtQoT\" title \"YouTube video player\" frameborder \"0\" allow \"accelerometer; autoplay; clipboard write; encrypted media; gyroscope; picture in picture; web share\" allowfullscreen></iframe> ### fill_rect method `fill_rect(x, y, width, height {, color, alpha})` Fill rectangle `width` by `height` starting at `x`, `y` with `color` optionally `alpha` blended with the background. `color` defaults to BLACK,`alpha` defaults to 255. > [Download the example from this GitHub link](https://github.com/BPI STEAM/BPI Centi S3 Doc/tree/main/micropython_example/05_semi transparent_rectangular_text_box) ### Display a semi transparent rectangle over the image ![](../assets/images/pic_5.jpg) We can display a semi transparent black rectangle on top of this image. ![](../assets/images/semi transparent_rectangular_text_box_1.jpg) ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config import gc def main(): try: tft tft_config.config(rotation 1) tft.init() gc.collect() tft.jpg('pic_5.jpg', 0, 0) tft.fill_rect(20, int(170/2 32), 320 20 20, 32, st7789.BLACK, 60) tft.show() gc.collect() except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ``` ### Display text in a semi transparent rectangle ![](../assets/images/semi transparent_rectangular_text_box_2.jpg) ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config import gc import time import vga1_bold_16x32 fg st7789.WHITE bg st7789.TRANSPARENT text_x 20 text_y int(170/2 32) rect_width 320 20 20 rect_height 32 def main(): try: tft tft_config.config(rotation 1) tft.init() gc.collect() tft.jpg('pic_5.jpg', 0, 0) tft.fill_rect(text_x, text_y, rect_width, rect_height, st7789.BLACK, 60) tft.text(vga1_bold_16x32, \"Hello World!\", text_x, text_y, fg, bg, 255) tft.show() gc.collect() except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ``` ### Create a semi transparent text box based on the character length ![](../assets/images/semi transparent_rectangular_text_box_3.jpg) ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config import gc import time import vga1_bold_16x32 fg st7789.WHITE bg st7789.TRANSPARENT text_x 20 text_y int(170/2 32) def text_rect(tft, font, font_size, text: str, text_coord, fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 255): rect_width font_size[0] * len(text) rect_height font_size[1] tft.fill_rect(text_coord[0], text_coord[1], rect_width, rect_height, bg, alpha_rect) tft.text(font, text, text_coord[0], text_coord[1], fg, st7789.TRANSPARENT, alpha_text) def main(): try: tft tft_config.config(rotation 1) tft.init() gc.collect() tft.jpg('pic_5.jpg', 0, 0) text_rect(tft, vga1_bold_16x32, (16, 32), \"Hello World!\", (text_x, text_y), fg st7789.WHITE, bg st7789.BLACK, alpha_text 80, alpha_rect 60) text_rect(tft, vga1_bold_16x32, (16, 32), \"It's MicroPython!\", (text_x, text_y+32), fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 60) tft.show() gc.collect() except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ```"},"/Centi_S3_doc/en/MicroPython/Refres_textbox_on_jpg.html":{"title":"","content":"## Refresh textbox on jpg <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/OUTVMON0_nQ?si T dvF5T4ZUHD37ne\" title \"YouTube video player\" frameborder \"0\" allow \"accelerometer; autoplay; clipboard write; encrypted media; gyroscope; picture in picture; web share\" allowfullscreen></iframe> ### jpg_decode method `jpg_decode(jpg_filename {, x, y, width, height})` Decode a jpg file and return it or a portion of it as a tuple composed of (buffer, width, height). The buffer is a color565 blit_buffer compatible byte array. The buffer will require width * height * 2 bytes of memory. If the optional x, y, width, and height parameters are given, the buffer will only contain the specified area of the image. ### blit_buffer method `blit_buffer(buffer, x, y, width, height {, alpha})` Copy bytes() or bytearray() content to the screen internal memory, x, y, width, height specified area. Note: every color requires 2 bytes in the array. alpha defaults to 255. ### Refresh the specified area of JPG ![](../assets/images/pic_6.jpg) Based on [](./Make_semi transparent_rectangular_text_box.md#make semi transparent rectangular text box), rewrite the text_rect method as a class and add an erase method, in which you use the jpg_decode method to store the semi transparent text box background, then use the blit_buffer method to overwrite the semi transparent text box, achieving partial refresh. ![](../assets/images/Refres_textbox_on_jpg.jpg) > [Download the example from this GitHub link](https://github.com/BPI STEAM/BPI Centi S3 Doc/tree/main/micropython_example/06_textbox_partial_refresh) ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import vga1_bold_16x32 import tft_config import gc import time class TextRect: def __init__(self): self.tft None self.text_y None self.text_x None self.rect_height None self.rect_width None def rect(self, tft, font, text, text_coord, fg st7789.WHITE, bg st7789.BLACK, alpha_text 255, alpha_rect 255): self.tft tft self.rect_width font.WIDTH * len(text) self.rect_height font.HEIGHT self.text_x text_coord[0] self.text_y text_coord[1] self.tft.fill_rect(self.text_x, self.text_y, self.rect_width, self.rect_height, bg, alpha_rect) self.tft.text(font, text, self.text_x, self.text_y, fg, st7789.TRANSPARENT, alpha_text) def erase(self, bg): buffer, _, _ self.tft.jpg_decode(bg, self.text_x, self.text_y, self.rect_width, self.rect_height) self.tft.blit_buffer(buffer, self.text_x, self.text_y, self.rect_width, self.rect_height) def main(): try: text_x 10 text_y int(170 / 2 32) tft tft_config.config(rotation 1) jpg 'pic_6.jpg' text_list [ \"This Is Just To Say\", \"I have eaten\", \"the plums\", \"that were in\", \"the icebox\", \"and which\", \"you were probably\", \"saving\", \"for breakfast\", \"Forgive me\", \"they were delicious\", \"so sweet\", \"and so cold\"] tft.init() gc.collect() tft.jpg(jpg, 0, 0) text_rect_1 TextRect() while True: for i in text_list: text_rect_1.rect(tft, vga1_bold_16x32, i, (text_x, text_y), fg st7789.YELLOW, bg st7789.BLACK, alpha_text 30, alpha_rect 80) tft.show() time.sleep(0.5) text_rect_1.erase(bg jpg) gc.collect() except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ```"},"/Centi_S3_doc/en/MicroPython/VScode_mpbridge.html":{"title":"","content":"## How to use VScode + mpbridge tool > [Install Visual Studio Code](./environment.html#install visual studio code), [Install the mpbridge tool](./environment.html#install the mpbridge tool) needs to be done first. ### Python Extensions Search `python` in the extension item to install Python extension support. ![](../assets/images/vscode_mpbridge_1.png) ### Open folder Click `Open Folder` in the file explorer item to open a folder, or create a new blank folder. It is especially recommended for novices to start with a blank folder. ![](../assets/images/vscode_mpbridge_2.png) ### open terminal Click the `Terminal` item, click the `New Terminal` item, and a new terminal window will open, which usually appears in the lower box. ![](../assets/images/vscode_mpbridge_3.png) ### mpbridge list serial port numbers First make sure your MicroPython development board has a serial data connection to your computer. Enter the following command in the terminal and hit enter, and all serial port numbers on the computer will be listed. ```sh mpbridge list ``` ![](../assets/images/vscode_mpbridge_4.png) If there is only one serial device connected to your computer, and it is your MicroPython development board, then the serial port number is that of the development board. If your computer is connected to multiple serial devices, you can check the number list once by connecting the device, and check the number list once by unplugging the device to find the only item that changes, which is the serial number of your MicroPython development board. port number. ### mpbridge connects to the development board Enter the following command in the terminal, modify the serial port number at the end to the number determined in the previous step, and hit the Enter key. If you are currently opening a blank folder, the mpbridge tool will first copy the files on the MicroPython development board to this folder. ```sh mpbridge dev auto reset hard COM6 ``` ![](../assets/images/vscode_mpbridge_5.png) When the files are copied, the terminal will display: ``` ? Press [Enter] to Clean Sync & Enter REPL Press [Ctrl + C] to exit ``` To enter the REPL, hit the Enter key again, and to exit the tool, use the `Ctrl + C` shortcut. Before entering the REPL, the development board will be hard reset once, so that the program results can be viewed immediately. If you don't want a hard reset, use this command: ```sh mpbridge dev COM6 ``` If you want to use soft reset then: ```sh mpbridge auto reset soft COM6 ``` ![](../assets/images/vscode_mpbridge_6.png) Once you are in the REPL, you can exit the REPL at any time by simply using the `Ctrl + X` shortcut. ![](../assets/images/vscode_mpbridge_7.png) ### Modify or add new files If you modify the code in a file or add a file in the local folder before exiting the REPL, the mpbridge tool will automatically check the changed file and synchronize it to the development board. ```sh mpbridge dev auto reset hard COM6 ``` This is also done when starting the command in the terminal. ![](../assets/images/vscode_mpbridge_11.png) ### Delete Files ```sh mpbridge dev auto reset hard COM6 ``` When this command finishes syncing the files, the terminal will display: ``` ? Press [Enter] to Clean Sync & Enter REPL Press [Ctrl + C] to exit ``` If you need to delete one or more files, delete it in the local folder first. Then click the Enter key, the mpbridge tool will automatically execute `Clean Sync`, delete the file with the same name in the development board, and finally enter the REPL. ![](../assets/images/vscode_mpbridge_8.png) ![](../assets/images/vscode_mpbridge_9.png) ![](../assets/images/vscode_mpbridge_10.png) If you only want to temporarily delete the files on the development board and need to keep the files locally on the computer, please remember to back up the files to other folders in advance. ### What did mpbridge do? ```sh mpbridge dev auto reset hard COM6 ``` When starting to run this command, and after exiting the REPL, mpbridge will automatically perform these file operations: 1. Push the files that are not in the device but exist locally to the device. 2. Check the hash of the files both in the local and the device, and then push the different files from the local to the device. 3. Pull the files that are not in the local but exist in the device to the local. Whenever the terminal displays this prompt: ``` ? Press [Enter] to Clean Sync & Enter REPL Press [Ctrl + C] to exit ``` Press the Enter key again, and mpbridge will automatically perform these file operations: 1. Push the files that are not in the device but exist locally to the device. 2. Check the hash of the files both in the local and the device, and then push the different files from the local to the device. 3. Delete the files from the device that are not in the local but exist in the device. 4. Hard reset the device and enter REPL. If you press the `Ctrl + C` shortcut key at this time, you will exit the mpbridge tool."},"/Centi_S3_doc/en/MicroPython/Burn_firmware.html":{"title":"","content":"## Burn firmware > BPI Centi S3 has been programmed with MicroPython firmware with st7789 parallel port driver, usually this step can be skipped. If you have an unexpected vicious BUG during development that prevents the development board from starting normally, or other reasons cause the firmware to be erased or damaged, you can find the compiled firmware from the github link below and burn it yourself. [BPI Centi S3 micropython firmware, github archive](https://github.com/BPI STEAM/BPI Centi S3 Doc/tree/main/micropython_st7789s3_firmware) ## Firmware info 1. micropython1.19.1_esp32s3_qspram_st7789s3.bin * micropython 1.19.1 release tag * esp32s3, Quad SPIRAM, 8M flash * russhughes/st7789s3_esp_lcd 2. micropython1.20.0dev_esp32s3_qspram_st7789s3.bin * micropython 1.20.0 master dev, until June 6, 2023(mip, espnow) * esp32s3, Quad SPIRAM, 8M flash * russhughes/st7789s3_esp_lcd ### Set firmware download mode There are two methods of operation: 1. Connect to the computer via USB, press and hold the BOOT button, then press the RESET button and release it, and finally release the BOOT button. 2. Press and hold the BOOT button when the power supply is disconnected, then connect to the computer via USB, and finally release the BOOT button. It can be seen from this that the chip selects the startup mode when reset or re powered through the GPIO0 controlled by the BOOT key. Confirm the COM interface in the device manager. The serial number of the COM interface in the firmware download mode and the normal mode is usually different. ### Install the esptool tool Enter the following command in the terminal to install esptool. ``` pip install esptool ``` ### esptool command > All operations on flash are irreversible, pay attention to backup valuable data. * Erase flash ``` python m esptool chip esp32s3 port COM1 baud 460800 erase_flash ``` * write to flash ``` python m esptool chip esp32s3 port COM1 baud 460800 before usb_reset after no_reset write_flash 0x0 micropython1.19.1_esp32s3_qspram_st7789s3.bin ```"},"/Centi_S3_doc/en/MicroPython/environment.html":{"title":"","content":"## Install and configure the environment ### System Environment Requirements Supports development in Windows 10, Windows 11, MacOS, Ubuntu or other Linux desktop operating systems. All the application examples in this article are based on the Windows 10 operating system, and other operating systems can also be used for reference. ### Install the Python environment Open [Python official website](https://www.python.org/). For the Windows system, the most convenient way to download the installation package is to click the icon shown in the figure below on the homepage of the official website to download. ![](../assets/images/Micropython_operating_env_1.png) Other operating systems or other distributions can be selected in the Downloads option bar. It is recommended to use a version above python 3.7. Be sure to check Add Python 3.x to PATH when you start the installation, so that you can avoid adding it to PATH manually. ![](../assets/images/Micropython_operating_env_2.png) Follow the installation prompts step by step to complete the installation smoothly. ### Install the mpremote tool The MicroPython open source community has launched a development aid tool: mpremote, through which we can establish serial communication with the development board, use REPL, and manage the file system on the development board. It also has mount and mip functions, which will be described in detail in subsequent chapters (preparing). After installing the Python environment, you can use pip to install mpremote in the terminal. Open PowerShell in the Windows system, and open the corresponding terminal in other operating systems, and enter the following command to install mpremote. ``` pip install mpremote ``` ### Install the mpbridge tool mpbridge is a CLI tool developed based on mpremote. It mainly provides the function of automatically synchronizing files to improve development efficiency. Enter the following command in Terminal to install mpbridge. ``` pip install mpbridge ``` ### Install Visual Studio Code The use of MicroPython does not depend on specific development tools, as long as the serial port communication with the development board can be established, the MicroPython interactive interpreter (REPL) can be obtained. Purely speaking, we basically only need a text editor to edit the code, and then upload our .py script files or other files to the development board through the mpremote tool or mpbridge tool. For a specific editor that combines basic code completion, syntax highlighting, integrated terminal, and lightweight, multi platform adaptation requirements, I recommend using Visual Studio Code (VScode), which may already be the tool you are most familiar with one of them. [Visual Studio Code official website address](https://code.visualstudio.com/) VScode documentation that may need to be referred to: * [Visual Studio Code Official Documentation](https://code.visualstudio.com/docs) * [Basic installation, setup](https://code.visualstudio.com/docs/setup/setup overview) * [Set Display Language](https://code.visualstudio.com/docs/getstarted/locales) * [Use the integrated terminal](https://code.visualstudio.com/docs/terminal/basics) All in Web people, minimalists, try [VScode on the Web](https://vscode.dev/), open a terminal on the local operating system and use mpremote or mpbridge to synchronize files, MicroPython REPL. ### Other recommended editors * [Thonny](https://github.com/thonny/thonny/releases), an open source graphical python editor sponsored by the Raspberry Pi Foundation, factory integrated with Raspberry Pi OS (Raspbian), the first choice for Raspberry Pi users to get started . * [PyCharm Community Edition](https://www.jetbrains.com/pycharm/download/#section windows), the free community edition is sufficient, and it also has code completion for micropython special libraries, although incomplete and It hasn't been updated for a long time. * [Jupyter](https://jupyter.org/) is also an editor on the web side, more professional, more pythonic, and supports web terminals."},"/Centi_S3_doc/en/MicroPython/Display_jpg_images.html":{"title":"","content":"## LCD Display jpg images <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/jR3LpkfWWy8\" title \"YouTube video player\" frameborder \"0\" allow \"accelerometer; autoplay; clipboard write; encrypted media; gyroscope; picture in picture; web share\" allowfullscreen></iframe> The sst7789 driver library has a method to display pictures in jpg format, which is very friendly to us who are learning for the first time. ### jpg method `jpg(jpg_filename, x, y)` Draws a JPG file at the given x and y coordinates, which are the upper left corner of the image. This method requires an additional 3100 bytes of memory for its working buffer. ### Prepare jpg files of appropriate size Choose any picture you like, and crop it to a picture with a length of 320 pixels and a width of 170 pixels, or a picture smaller than this size. There are a large number of optional picture editing tools in various smart terminal devices and various operating systems, and you can use your favorite tools for editing. Here is a random web online image editing tool that can be used for free, [Pixlr X](https://pixlr.com/x/). Put the cropped picture into our local MicroPython working folder, rename it to `pic_1.jpg`, and refer to the method of uploading the picture to the MicroPython device [Use mpbridge in the terminal](#use mpbridge in terminal) . A cropped image is prepared here. ![](../assets/images/pic_1.jpg) ### jpg method use case Use the jpg method in the main.py script. ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config import gc def main(): try: tft tft_config.config(rotation 1) tft.init() tft.jpg(\"pic_1.jpg\", 0, 0) tft. show() gc. collect() except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ``` After uploading main.py, reset the device and you can see the picture on the screen. Let's prepare a few more jpg files of appropriate size, and then we can design a loop, and play the pictures on the screen of BPI Centi S3 in a loop like a slide show. ![](../assets/images/pic_2.jpg) ![](../assets/images/pic_3.jpg) ![](../assets/images/pic_4.jpg) ![](../assets/images/pic_5.jpg) ```py \"\"\" BPI Centi S3 170x320 ST7789 display \"\"\" import st7789 import tft_config import gc import time pic_list [\"pic_1.jpg\", \"pic_2.jpg\", \"pic_3.jpg\", \"pic_4.jpg\", \"pic_5.jpg\"] def main(): try: tft tft_config.config(rotation 1) tft.init() while True: for pic in pic_list: tft.jpg(pic, 0, 0) tft.show() gc.collect() time.sleep(1) except BaseException as err: err_type err.__class__.__name__ print('Err type:', err_type) from sys import print_exception print_exception(err) finally: tft.deinit() print(\"tft deinit\") main() ```"},"/Centi_S3_doc/en/Arduino/Environment.html":{"title":"","content":"## Install and configure the environment > Reference [arduino esp32 DOC Getting Started » Installing](https://docs.espressif.com/projects/arduino esp32/en/latest/installing.html) ![](../assets/images/logo_arduino.png) This is the way to install Arduino ESP32 directly from the Arduino IDE. Stable version link: https://espressif.github.io/arduino esp32/package_esp32_index.json Development version link: https://espressif.github.io/arduino esp32/package_esp32_dev_index.json > Starting with the Arduino IDE version 1.6.4, Arduino allows installation of third party platform packages using Boards Manager. We have packages available for Windows, macOS, and Linux. To start the installation process with Boards Managaer, follow these steps: Install the current upstream Arduino IDE at the 1.8 level or later. The current version is at the [arduino.cc website](https://www.arduino.cc/en/software). Start Arduino and open the File>Preferences window. ![](../assets/images/arduino_install_guide_preferences.png) Enter one of the release links above into **Additional Board Manager URLs** field. You can add multiple URLs, separating them with commas. ![](../assets/images/arduino_install_guide_boards_manager_url.png) Open the Board Manager from the Tools > Boards menu and install the esp32 platform. ![](../assets/images/arduino_install_guide_boards_manager_esp32.png) Restart Arduino IDE. Select `ESP32S3 Dev Module` board from Tools > Board menu after installation. Select the correct settings in the Tools menu as shown below. Setting Value : : USB CDC On Boot Enabled CPU Frequency 240MHz (WiFi) Core Debug Level None USB DFU On Boot Enabled (Requires USB OTG Mode) Erase All Flash Before Sketch Upload Disabled Events Run On Core 1 Flash Mode QIO 80MHz Flash Size 8MB (64Mb) JTAG Adapter Integrated USB JTAG Arduino Runs On Core 1 USB Firmware MSC On Boot Disabled Partition Scheme 8M with spiffs (3MB APP/1.5MB SPIFFS) PSRAM QSPI PSRAM Upload Mode UARTO / Hardware CDC Upload Speed 921600 USB Mode Hardware CDC and JTAG Or select `BPI Leaf S3` board from Tools > Board menu, its default settings can be used directly."},"/Centi_S3_doc/en/Arduino/Arduino_GFX_show_characters.html":{"title":"","content":"## Arduino GFX, show characters This is the most basic routine of the Arduino GFX library, which displays `Hello World!` characters on the screen, and displays them in random colors, coordinates, and sizes. [GitHub Source code](https://github.com/BPI STEAM/BPI Centi S3 Doc/blob/main/arduino_example/01_show_characters_helloworld/HelloWorld.ino) .. details:: Source code, click to expand :open: true ```c #include <Arduino_GFX_Library.h> Arduino_DataBus *bus new Arduino_ESP32LCD8(5 /* DC */, 4 /* CS */, 6 /* WR */, 7 /* RD */, 8 /* D0 */, 9 /* D1 */, 10 /* D2 */, 11 /* D3 */, 12 /* D4 */, 13 /* D5 */, 14 /* D6 */, 15 /* D7 */); Arduino_GFX *gfx new Arduino_ST7789(bus, 3 /* RST */, 1 /* rotation */, true /* IPS */, 170 /* width */, 320 /* height */, 35 /* col offset 1 */, 0 /* row offset 1 */, 35 /* col offset 2 */, 0 /* row offset 2 */); #define GFX_BL 2 // default backlight pin, you may replace DF_GFX_BL to actual backlight pin void setup(void) { gfx >begin(); gfx >fillScreen(BLACK); #ifdef GFX_BL pinMode(GFX_BL, OUTPUT); digitalWrite(GFX_BL, HIGH); #endif gfx >setCursor(10, 10); gfx >setTextColor(RED); gfx >setTextSize(2 /* x scale */, 2 /* y scale */, 2 /* pixel_margin */); gfx >println(\"Hello World!\"); delay(5000); // 5 seconds } void loop() { gfx >setCursor(random(gfx >width()), random(gfx >height())); gfx >setTextColor(random(0xffff), random(0xffff)); gfx >setTextSize(random(6) /* x scale */, random(6) /* y scale */, random(2) /* pixel_margin */); gfx >println(\"Hello World!\"); delay(1000); // 1 second } ```"},"/Centi_S3_doc/en/Arduino/Arduino_GFX_Install.html":{"title":"","content":"## Install the Arduino GFX library In the arduino IDE, select Tools > Manager Libraries, enter `GFX Library for Arduino` in the search box, find the project with the same name, and click Install. ![](../assets/images/arduino_GFX_Install.png)"},"/Centi_S3_doc/en/Arduino/Arduino_upload.html":{"title":"","content":"## Connect, Upload Before uploading, make sure you have selected the port corresponding to your development board in Tools > Port. If it is the first time to upload the Arduino program, you need to put the development board in bootloader mode first. Click Upload to compile and upload the code to the development board. ### Set firmware download mode There are two methods of operation: 1. Connect to the computer via USB, press and hold the BOOT button, then press the RESET button and release it, and finally release the BOOT button. 2. Press and hold the BOOT button when the power supply is disconnected, then connect to the computer via USB, and finally release the BOOT button. It can be seen from this that the chip selects the startup mode when reset or re powered through the GPIO0 controlled by the BOOT key. Confirm the COM interface in the device manager. The serial number of the COM interface in the firmware download mode and the normal mode is usually different. Select the newly appeared port in Tools > Port."},"/Centi_S3_doc/en/index.html":{"title":"","content":"## Introduction ![](assets/images/BPI Centi S3.jpg) BPI Centi S3 is a small sized ESP32 S3 development board with an 1.9 inch LCD onboard, suitable for the development of Internet of Things application projects including color display, interactive control, wireless communication, and sensor data acquisition. Using the Espressif ESP32 S3 chip, it supports 2.4 GHz Wi Fi and Bluetooth® Low Energy (Bluetooth® LE) dual mode wireless communication. Within the compact board, it also provides an additional rotary encoder, a buzzer, a WS2812 color LED, and all other available pins for external peripherals connection to meet diverse needs. Support both USB and external 3.7V lithium battery power input. With the board's designed battery voltage detection circuit, it can automatically detect and switch to USB power supply when both are connected. And also supports USB charging mode, convenient for power management. ## Key Features * ESP32 S3, Xtensa® 32 bit LX7 Processor * 2M PSRAM, 8M FLASH * 2.4G WIFI, Bluetooth 5, Bluetooth mesh * GPIO, PWM, I2C, SPI, RMT, I2S, UART, USB, JTAG * 1 * ST7789 TFT LCD, 1.9 inch, 170*320 resolution, 8bit 8080 parallel port * 1 * Rotary Encoder * 1 * Buzzer * 1 * full color LED * 1 * SH 1mm 4 Pin I2C connector * 2 * SH 1mm 6 Pin * 1 * USB Type C connector * 1 * MX 1.25mm 2 Pin battery connector, supports charging * 2 * M3 Screw Mounting Holes ## Hardware ### Hardware Interface Schematic Diagram ![](assets/images/BPI Centi S3_drawio.png) ### Hardware Specifications : :: : SoC ESP32 S3, Xtensa® 32 bit LX7 dual core processor Clock Frequency 240MHz MAX Internal ROM 384 KB Internal SRAM 320 KB Onboard FLASH ROM 8MB On chip PSRAM 2MB WIFI IEEE 802.11 b/g/n, 2.4Ghz frequency band, 150Mbps bluetooth Bluetooth 5, Bluetooth mesh External crystal oscillator 40Mhz RTC and Low­Power Management Power Management Unit (PMU) + Ultra ­Low ­Power Coprocessor(ULP) GPIO 9 available GPIOs have been exported to the SH socket Support Peripherals I2C, SPI, PWM, UART, RMT, I2S, SD SH 1mm socket 1 * 4Pin, 2 * 6Pin USB 1 * Full Speed USB 2.0 OTG, Type C Female USB Serial/JTAG Controller 1, USB full speed standard, CDC ACM, JTAG TFT LCD size 1.9 inches TFT LCD resolution 170 * 320 RGB TFT LCD control chip ST7789V3 TFT LCD interface 8bit 8080 parallel port Encoder 1 * Incremental Rotary Encoder, support pressing function Buzzer 1 Color LED 1 * WS2812 2020 LED Button RST Button, BOOT Button Screw Holes 2 * M3 Screw Holes Machine working temperature 20℃ ~ +60℃ Working voltage 3.3V USB input voltage 3.3V~5.5V Maximum discharge current 2A@3.3V DC/DC Battery connector MX 1.25mm 2 Pin USB charging Support Maximum charging current 500mA ### Hardware Dimensions ![](assets/images/BPI Centi S3 V0.2_Dimensions.jpg) ### LCD Wiring Definition : :: : ESP_LCD_BLK GPIO2 ESP_LCD_RES GPIO3 ESP_LCD_CS GPIO4 ESP_LCD_D/C GPIO5 ESP_LCD_WR GPIO6 ESP_LCD_RD GPIO7 ESP_LCD_D0 GPIO8 ESP_LCD_D1 GPIO9 ESP_LCD_D2 GPIO10 ESP_LCD_D3 GPIO11 ESP_LCD_D4 GPIO12 ESP_LCD_D5 GPIO13 ESP_LCD_D6 GPIO14 ESP_LCD_D7 GPIO15 ESP_TP_RESET GPIO16 II2C_SCL GPIO17 II2C_SDA GPIO18 ESP_TP_INT GPIO21 ### Peripheral Wiring Definition : :: : RST button RST(CHIP_PU) BOOT button GPIO0 BAT_ADC battery voltage detection GPIO1 Buzzer GPIO36 EC_KEY Rotary Encoder GPIO35 EC_A Rotary Encoder GPIO37 EC_B Rotary Encoder GPIO47 WS2812B 2020 GPIO48 ### Buy it [Aliexpress](https://www.aliexpress.com/item/1005005510964130.html)"},"/Centi_S3_doc/en/getting-started.html":{"title":"","content":"## Getting Started Guide We compiled this Getting Started Guide to help you get started with this BPI Centi S3 development board quickly. ### First Thing Use a USB C cable with power and data functions to connect the BPI Centi S3 development board to your computer. When using it for the first time, its screen will immediately display a welcome screen after power on, and the buzzer will beep twice. BPI Centi S3 has been programmed with MicroPython 1.19.1 firmware and integrated ST7789 C module driver when it leaves the factory. It is recommended for beginners to use MicroPython to develop and learn. ### Use MicroPython to get started quickly 1. See [Install and configure the environment](./MicroPython/environment.html), install Python 3, mpremote tool, mpbridge tool, VScode IDE. 2. See [How to use VScode + mpbridge tool](./MicroPython/VScode_mpbridge.html) to learn how to connect to the development board, copy, modify, and delete files on the development board. 3. See [REPL Use Case](./MicroPython/REPL_use_case.html) to quickly understand the common shortcut keys of MicroPython REPL and the method of viewing modules. After the above three steps, you can start developing. For learning Python and MicroPython, we recommend getting started with Python in the [Python Tutorial](https://docs.python.org/3.10/tutorial/index.html). Apply what you have learned in Python, and look at the [MicroPython documentation](https://docs.micropython.org/en/latest/index.html), you can quickly refer to MicroPython's special library, ESP32 port special library for our development. Learn some of the differences between the two on the page [Differences between MicroPython and CPython](https://docs.micropython.org/en/latest/genrst/index.html#). In the left sidebar of this page you can find some MicroPython example that may help you. The ST7789 C module driver comes from: [russhughes/st7789s3_esp_lcd](https://github.com/russhughes/st7789s3_esp_lcd), The MIT License In this GitHub repository, you can check all the methods of the st7789 module, as well as the compiled methods, thanks to russhughes for his open source contributions. If you have an unexpected vicious BUG during development that prevents the development board from starting normally, or other reasons cause the firmware to be erased or damaged, see [Burn firmware](./MicroPython/Burn_firmware.html)."}}