{"/Pico_RP2040_doc/en/Unboxing/Introduction.html":{"title":"Development board introduction","content":"# Development board introduction The Banana Pi Pico series is a low power microcontroller development board designed for the Internet of Things. BPI Pico RP2040 is a microcontroller development board launched by Banana Pi equipped with RP2040 chip. Its most notable feature is to add a Onboard WS2812 color LED; replace the 3 Pin DEBUG interface with a SH 1mm 4 Pin socket, which can be connected with Qwiic & STEMMA QT or any possible peripherals; replace the micro USB socket with a USB Type C socket , supports reversible insertion, and is compatible with the USB Type C cable of most modern smartphones, no additional purchase is required. ## Key Features Dual core ARM Cortex M0+ CPU cores (up to 133 MHz) 264K SRAM 2MB Flash 26 available GPIO pins, 4 of which support ADC analog input Peripherals: 2 x UARTs 2 × SPI controllers 2 × I2C controllers 16 × PWM channels 1 × USB 1.1 controller and PHY, supporting host and device 8 × PIO state machines 1 x LED 1 x WS2812 LED 1 × SH 1mm 4 Pin socket 1 × USB Type C socket ## hardware ### Interface diagram ![](../assets/images/BPI Pico RP2040 V0.2 IO.jpg) ### Hardware Dimensions ![](../assets/images/BPI Pico RP2040 V0.2 dimension.jpg) <table> <tr> <td>BPI Pico RP2040 Size Chart</td> </tr> <tr> <td>Pin spacing</td> <td>2.54mm</td> </tr> <tr> <td>Mounting hole spacing</td> <td>17.6mm/ 11.4mm</td> </tr> <tr> <td>Mounting hole size</td> <td>Inner diameter 2.1mm/outer diameter 3.4mm</td> </tr> <tr> <td>Motherboard Dimensions</td> <td>11.4 × 55.8(mm)</td> </tr> <tr> <td>Board thickness</td> <td>1.2mm</td> </tr> <tr> <td></td> </tr> </table> The pin spacing is compatible with universal boards (perforated boards, dot matrix boards), breadboards, and can be directly attached to other PCBs for easy debugging. ## References and Resources [GitHub: BPI Pico RP2040 Development Board Schematic PDF]() [RP2040 Technical Specification](https://datasheets.raspberrypi.com/rp2040/rp2040 datasheet.pdf) [RP2040 Technical Reference Manual](https://datasheets.raspberrypi.com/rp2040/hardware design with rp2040.pdf) [rp2040 product brief.pdf](https://datasheets.raspberrypi.com/rp2040/rp2040 product brief.pdf) [raspberry pi pico python sdk.pdf](https://datasheets.raspberrypi.com/pico/raspberry pi pico python sdk.pdf)"},"/Pico_RP2040_doc/en/Programming/Arduino_Gettingstart.html":{"title":"","content":"## Arduino download and install Arduino IDE download link: https://www.arduino.cc/en/software Select the version corresponding to the operating system to download, and follow the installation prompts to install step by step. ## Install RP2040 development board support package Take Arduino IDE 2.0.2 as an example, enter `PICO` or `RP2040` in the search bar of the Boards Manager, select `Arduino Mbed OS RP2040 Boards`, click `Install` to install the RP2040 development board support package, and the latest version is installed by default That's it. ![](../assets/images/arduino_env_1.png) ## Set the board type In the upper option bar, click Tools > Boards > Arduino Mbed OS RP2040 Boards > Raspberry Pico. ![](../assets/images/arduino_env_2.png) ## Connect to the development board When using Arduino on the BPI Pico RP2040 development board for the first time, it is necessary to manually enter the development board into UF2 Bootloader mode, and this step can usually be avoided later. Make sure there is a type c data cable, one end is connected to the PC, pick up the development board, keep it free of any connection or peripheral hardware, press and hold the Boot button, connect the type c data cable to the development board, release the Boot button, A new disk called RPI RP2 will appear in the PC's system. ## Turn on the LED In the upper option bar, click File > Examples > 01.Basics > Blink to open the Blink example, ![](../assets/images/arduino_env_3.png) Or directly enter the following code in the code editing area. ```c void setup() { // initialize digital pin LED_BUILTIN as an output. pinMode(LED_BUILTIN, OUTPUT); } // the loop function runs over and over again forever void loop() { digitalWrite(LED_BUILTIN, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(LED_BUILTIN, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second } ``` Click the `Upload` button, the program will be uploaded to the development board after the compilation is complete, and the onboard LED will blink at intervals of 1 second. ## Reference Resources [RP2040 Arduino documentation](https://arduino pico.readthedocs.io/en/latest/)"},"/Pico_RP2040_doc/en/Programming/MicroPython_Gettingstart.html":{"title":"","content":"## MicroPython firmware download and burn On the [MicroPython official website] (https://micropython.org/), you can find the firmware supporting the RP2040 chip. The BPI Pico RP2040 is fully compatible with the firmware of the Raspberry Pi Pico: https://micropython.org/download/rp2 pico/ After clicking the link to enter the page, you can see several lists of firmware download addresses below. It is recommended to select the first item in the Releases column to download, taking into account stability and new features. Subsequent routines are written based on v1.19.1 firmware. ![](../assets/images/micropython_env_1.png) The firmware provided in the Nightly builds column is a daily build and will have the latest features, but the stability may be slightly poorer, and there may be no documentation for the latest features. After the download is complete, you will get a file with a .uf2 extension. The way to burn it to the BPI Pico RP2040 development board is very simple. First, make sure there is a type c data cable, connect one end to the PC, pick up the development board, Keep the above without any connection or peripheral hardware, press and hold the Boot button, connect the type c data cable to the development board, release the Boot button, a new disk named RPI RP2 will appear in the PC system, and the .uf2 The files are copied to this disk. After the copy is completed, the development board will automatically reset and enter the MicroPython mode. ## Install Thonny IDE Take Windows as an example, click the link to download [thonny 3.3.13.zip](../assets/images/thonny 3.3.13.zip), and get `thonny 3.3.13.exe` after decompression. Run `thonny 3.3.13.exe`, and follow the installation prompts to complete the installation step by step. It can also be installed through pip, `pip install thonny 3.3.13`, requires [Python](https://www.python.org/) environment, suitable for macOS or Linux. ## Establish a connection between the development board and Thonny Connect the development board to the computer. To run Thonny, click Run > Select interpreter. ![](../assets/images/micropython_env_2.png) Select MicroPython(Raspberry Pi Pico). ![](../assets/images/micropython_env_3.png) Select the serial interface where the development board is located, and click OK to confirm the settings. ![](../assets/images/micropython_env_4.png) Check View > Files to open the file management bar. ![](../assets/images/micropython_env_5.png) ## Use the REPL to output Hello World **REPL** is the abbreviation of **Read Eval Print Loop**, translated as **Read Eval Output Loop**. We can understand its meaning through practical operation. After connecting the development board with MicroPython firmware installed to the computer, running Thonny IDE and configuring it correctly, the following text will appear in the Shell window: ``` MicroPython v1.19.1 on 2022 06 18; Raspberry Pi Pico with RP2040 Type \"help()\" for more information. >>> ``` Pay attention to the `>>>` prompt on the last line, we can directly enter the formula or code after this, and press the `enter` key on the keyboard to get the output result in the next line immediately. ```python >>> 1+2 3 >>> print(\"Hello World\") hello world >>> ``` Now it can be understood very intuitively. It will read the information we input, perform calculation and evaluation, output the result, and then wait for our subsequent input, and keep looping this process. This is why **REPL** is translated into ** The reason for the interactive interpreter is that we can directly interact with the hardware by inputting codes. There is no need to execute the compilation process in the middle like the traditional C language. The information we input is transmitted to the chip for interpretation and operation without compilation. Yes, this is an important feature of the Python language, and MicroPython perfectly inherits it. If you just use MicroPython REPL, many software with serial port information sending and receiving functions can be operated. If you are interested, you can try various serial port tools, which can give people a deeper understanding of the meaning of \"there is no intermediate compilation process\". >About the application of REPL, more detailed and comprehensive content can refer to [MicroPython Documentation: REPL](https://docs.micropython.org/en/latest/reference/repl.html) ## code editor Of course, Thonny IDE can not only perform REPL operations, but as a python code editor, it still has its own functions. Create a new file and enter the code in its editing area. ```python print(1+2) print(\"Hello World\") ``` After finishing the code editing, click **Save**, you can choose to save the file to the development board, which will directly transfer the entire file to the flash of the development board. You can name the file `main.py`, and the device will execute it after each power on or reset. ![](../assets/images/Quick_Start.png) Now click **Run current script** to run. It also does not need to be compiled, and the result will be obtained immediately in the Shell. ``` 3 hello world ``` In addition, you can also try the REPL keyboard shortcut **ctrl+D** software reset, you can see that the program is executed immediately after the reset and prints out the information. ## Turn on the LED The onboard LED on the BPI Pico RP2040 is connected to GPIO 25 pin, you can light it on the REPL. When you see the REPL prompt `>>>`, please enter the following code. ```python >>> from machine import Pin >>> led Pin(25, Pin.OUT) ``` > The `machine` module is used to control the hardware on the development board. This is standard across all MicroPython ports, and you can learn more about it in the [MicroPython documentation: machine](https://docs.micropython.org/en/v1.19.1/library/machine.html). Enter the following code and the LED will light up. ```python >>> led. value(1) ``` Entering the following code will turn off the LED. ```python >>> led. value(0) ``` ## Use onboard RGB LED The onboard WS2812 RGB LED on BPI Pico RP2040 is connected to GPIO 3 pin, it only needs one signal line to control, enter the following code in REPL. ```python >>> from machine import Pin >>> from neopixel import NeoPixel >>> neo NeoPixel(Pin(3), 1) ``` > The `neopixel` module provides drivers for WS2812 RGB LED. You can learn more about it in the [MicroPython documentation: neopixel](https://docs.micropython.org/en/v1.19.1/library/neopixel.html). Enter the code below and the RGB LED will light up red. ```python >>> neo[0] (25,0,0) >>> neo.write() ``` `neo[0] (25,0,0)` sets the color of the first lantern. There are three solid color LEDs in the WS2812 lantern, and their colors are red, green, and blue. The elements in the `(25,0,0)` tuple control their brightness in turn, and the value range is 0 ~ 255. The value of the element The bigger it is, the brighter the solid color LED it controls. It is recommended to control the value of the element below 50. When the value is too high, it will be dazzling when viewed directly at close range. After `neo.write()` is executed, the chip will transmit the control signal to the onboard WS2812 lantern. You can try to modify the data in the tuple yourself to control the color of the RGB LEDs. For example, continue to enter the following code in the REPL to make the RGB LEDs white. ```python >>> neo[0] (25,25,25) >>> neo.write() ``` ## Reference Resources [raspberry pi pico python sdk.pdf](https://datasheets.raspberrypi.com/pico/raspberry pi pico python sdk.pdf)"},"/Pico_RP2040_doc/en/index.html":{"title":"【 BPI-Pico-RP2040 Development Board 】","content":"# 【 BPI Pico RP2040 Development Board 】 ## Introduction ![](assets/images/BPI Pico RP2040.jpg) The Banana Pi Pico series is a low power microcontroller development board designed for IoT (Internet of Things) projects. BPI Pico RP2040 is a development board launched by Banana Pi equipped with the RP2040 chip. Its most notable feature is retaining most the function of the Raspberry Pi Pico. With the same dimention and pin layout, it has an additional WS2812 LED, replaced the 3 Pin debug socket with a SH 1mm 4 pin socket, which can be paired with Qwiic & STEMMA QT or other compatible peripherals; also replacing the micro USB socket with a USB Type C socket, which may be inserted in either orientation. Jump to [Unboxing BPI Pico RP2040 Development Board](Unboxing/Introduction.html) page for more details. ## Programming with MicroPython ![](assets/images/Mircopython.png) Regardless of the programmer is a beginner or not, MicroPython is considered to be less difficult to develop than other MCU programming languages. Its code is easy to understand compared to other programming languages, and it has various resources accumulated over the years by the open source community. Just like Python, it has strong vitality and application value. By uploading the MicroPython firmware, you can use the Python language to program in the development board. ## Programming with CircuitPython ![](assets/images/CircuitPython_Repo_header_logo.jpg) CircuitPython is a programming language designed to simplify programming experiments and learning on microcontroller development boards. CircuitPython programming with the Mu editor is the least difficult way to get started. Install the software and connect the device to start using it. ## Programming with Arduino ![](assets/images/Arduino_logo_1200x350.png) Provides software tools and best examples to get started with Arduino, lowering the barrier to entry for ESP32 embedded professional development. >Arduino will not explain too much basic content, please have C/C++ language development foundation. ## Reference Resources [Official WIKI](https://wiki.banana pi.org/BPI Pico RP2040) [GitHub: BPI Pico RP2040 Development Board Schematic PDF](https://github.com/BPI STEAM/BPI Pico RP2040 Doc/blob/main/BPI Pico RP2040 V0.2 SCH.pdf) [rp2040 datasheet.pdf](https://datasheets.raspberrypi.com/rp2040/rp2040 datasheet.pdf) [rp2040 product brief.pdf](https://datasheets.raspberrypi.com/rp2040/rp2040 product brief.pdf) ## Sample Purchase [Official AliExpress]() [Official Taobao]() OEM&OEM customized service: sales@banana pi.com"}}